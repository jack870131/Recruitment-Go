/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 09 22:26:50 GMT 2020
 */

package com.recruit.recruitment.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.recruit.recruitment.controller.ApplicationController;
import com.recruit.recruitment.model.entity.Result;
import com.recruit.recruitment.model.pojo.Application;
import com.recruit.recruitment.service.ApplicationService;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ApplicationController_ESTest extends ApplicationController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ApplicationController applicationController0 = new ApplicationController();
      ApplicationService applicationService0 = mock(ApplicationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationController0, (Class<?>) ApplicationController.class, "applicationService", (Object) applicationService0);
      Injector.validateBean(applicationController0, (Class<?>) ApplicationController.class);
      Integer integer0 = new Integer((-2173));
      Integer integer1 = new Integer((-2173));
      Result result0 = applicationController0.scoreApplication(integer0, integer1);
      assertEquals("Score candidate successful", result0.getMessage());
      assertEquals(200, (int)result0.getCode());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ApplicationController applicationController0 = new ApplicationController();
      ApplicationService applicationService0 = mock(ApplicationService.class, new ViolatedAssumptionAnswer());
      doReturn((Application) null).when(applicationService0).findApplicationByApplicationid(anyInt());
      Injector.inject(applicationController0, (Class<?>) ApplicationController.class, "applicationService", (Object) applicationService0);
      Injector.validateBean(applicationController0, (Class<?>) ApplicationController.class);
      Integer integer0 = new Integer(2664);
      Result result0 = applicationController0.getApplicationByApplicationid(integer0);
      assertEquals("Query successful", result0.getMessage());
      assertEquals(200, (int)result0.getCode());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ApplicationController applicationController0 = new ApplicationController();
      ApplicationService applicationService0 = mock(ApplicationService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(applicationService0).findApplicationsByUser();
      Injector.inject(applicationController0, (Class<?>) ApplicationController.class, "applicationService", (Object) applicationService0);
      Injector.validateBean(applicationController0, (Class<?>) ApplicationController.class);
      Result result0 = applicationController0.getApplicationsByUser();
      assertEquals(200, (int)result0.getCode());
      assertEquals("Query successful", result0.getMessage());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ApplicationController applicationController0 = new ApplicationController();
      ApplicationService applicationService0 = mock(ApplicationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationController0, (Class<?>) ApplicationController.class, "applicationService", (Object) applicationService0);
      Injector.validateBean(applicationController0, (Class<?>) ApplicationController.class);
      Integer integer0 = new Integer(2586);
      Result result0 = applicationController0.applyJob(integer0);
      assertEquals(200, (int)result0.getCode());
      assertEquals("Apply successful", result0.getMessage());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ApplicationController applicationController0 = new ApplicationController();
      ApplicationService applicationService0 = mock(ApplicationService.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(applicationService0).findApplicationsByPostid(anyInt());
      Injector.inject(applicationController0, (Class<?>) ApplicationController.class, "applicationService", (Object) applicationService0);
      Injector.validateBean(applicationController0, (Class<?>) ApplicationController.class);
      Integer integer0 = new Integer(2586);
      Result result0 = applicationController0.getApplicationsByPostid(integer0);
      assertEquals(200, (int)result0.getCode());
      assertEquals("Query successful", result0.getMessage());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ApplicationController applicationController0 = new ApplicationController();
      ApplicationService applicationService0 = mock(ApplicationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(applicationController0, (Class<?>) ApplicationController.class, "applicationService", (Object) applicationService0);
      Injector.validateBean(applicationController0, (Class<?>) ApplicationController.class);
      Integer integer0 = new Integer(2586);
      Result result0 = applicationController0.deleteApplicationByApplicationid(integer0);
      assertEquals("Delete successful", result0.getMessage());
      assertEquals(200, (int)result0.getCode());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ApplicationController applicationController0 = new ApplicationController();
      ApplicationService applicationService0 = mock(ApplicationService.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(applicationService0).checkIfApplied(anyInt());
      Injector.inject(applicationController0, (Class<?>) ApplicationController.class, "applicationService", (Object) applicationService0);
      Injector.validateBean(applicationController0, (Class<?>) ApplicationController.class);
      Integer integer0 = new Integer(2586);
      Result result0 = applicationController0.checkIfApplied(integer0);
      assertEquals(200, (int)result0.getCode());
      assertEquals("Query successfu", result0.getMessage());
  }
}

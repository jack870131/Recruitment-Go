/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 10 11:34:54 GMT 2020
 */

package com.recruit.recruitment.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.recruit.recruitment.controller.ScoreController;
import com.recruit.recruitment.model.entity.Result;
import com.recruit.recruitment.model.pojo.Score;
import com.recruit.recruitment.service.ScoreService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ScoreController_ESTest extends ScoreController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ScoreController scoreController0 = new ScoreController();
      ScoreService scoreService0 = mock(ScoreService.class, new ViolatedAssumptionAnswer());
      doReturn((Score) null).when(scoreService0).findApplicationScoreByMarker(anyInt());
      Injector.inject(scoreController0, (Class<?>) ScoreController.class, "scoreService", (Object) scoreService0);
      Injector.validateBean(scoreController0, (Class<?>) ScoreController.class);
      Result result0 = scoreController0.getApplicationScoreByMarker((Integer) null);
      assertEquals(200, (int)result0.getCode());
      assertEquals("Query successful", result0.getMessage());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 10 11:07:20 GMT 2020
 */

package com.recruit.recruitment.config;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.recruit.recruitment.config.ScheduledTaskConfig;
import com.recruit.recruitment.mapper.EvaluatorMapper;
import com.recruit.recruitment.mapper.NotificationMapper;
import com.recruit.recruitment.mapper.PostMapper;
import com.recruit.recruitment.mapper.ResumeMapper;
import com.recruit.recruitment.mapper.UserMapper;
import com.recruit.recruitment.service.ApplicationService;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.amqp.rabbit.core.RabbitTemplate;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ScheduledTaskConfig_ESTest extends ScheduledTaskConfig_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ScheduledTaskConfig scheduledTaskConfig0 = new ScheduledTaskConfig();
      ApplicationService applicationService0 = mock(ApplicationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(scheduledTaskConfig0, (Class<?>) ScheduledTaskConfig.class, "applicationService", (Object) applicationService0);
      EvaluatorMapper evaluatorMapper0 = mock(EvaluatorMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(scheduledTaskConfig0, (Class<?>) ScheduledTaskConfig.class, "evaluatorMapper", (Object) evaluatorMapper0);
      NotificationMapper notificationMapper0 = mock(NotificationMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(scheduledTaskConfig0, (Class<?>) ScheduledTaskConfig.class, "notificationMapper", (Object) notificationMapper0);
      PostMapper postMapper0 = mock(PostMapper.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(postMapper0).selectAll();
      Injector.inject(scheduledTaskConfig0, (Class<?>) ScheduledTaskConfig.class, "postMapper", (Object) postMapper0);
      RabbitTemplate rabbitTemplate0 = mock(RabbitTemplate.class, new ViolatedAssumptionAnswer());
      Injector.inject(scheduledTaskConfig0, (Class<?>) ScheduledTaskConfig.class, "rabbitTemplate", (Object) rabbitTemplate0);
      ResumeMapper resumeMapper0 = mock(ResumeMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(scheduledTaskConfig0, (Class<?>) ScheduledTaskConfig.class, "resumeMapper", (Object) resumeMapper0);
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(scheduledTaskConfig0, (Class<?>) ScheduledTaskConfig.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(scheduledTaskConfig0, (Class<?>) ScheduledTaskConfig.class);
      // Undeclared exception!
      try { 
        scheduledTaskConfig0.inspectPosts();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.config.ScheduledTaskConfig", e);
      }
  }
}

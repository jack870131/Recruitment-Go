/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 10 11:28:35 GMT 2020
 */

package com.recruit.recruitment.serviceImpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.recruit.recruitment.mapper.NotificationMapper;
import com.recruit.recruitment.mapper.UserMapper;
import com.recruit.recruitment.model.pojo.User;
import com.recruit.recruitment.serviceImpl.NotificationServiceImpl;
import com.recruit.recruitment.utils.JwtTokenUtil;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NotificationServiceImpl_ESTest extends NotificationServiceImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NotificationServiceImpl notificationServiceImpl0 = new NotificationServiceImpl();
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, new ViolatedAssumptionAnswer());
      doReturn("!", (String) null).when(jwtTokenUtil0).getUsernameFromRequest(any(javax.servlet.http.HttpServletRequest.class));
      Injector.inject(notificationServiceImpl0, (Class<?>) NotificationServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      NotificationMapper notificationMapper0 = mock(NotificationMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(notificationMapper0).deleteByPrimaryKey(anyInt());
      doReturn((List<Object>) null).when(notificationMapper0).selectByUserid(anyInt());
      Injector.inject(notificationServiceImpl0, (Class<?>) NotificationServiceImpl.class, "notificationMapper", (Object) notificationMapper0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      Injector.inject(notificationServiceImpl0, (Class<?>) NotificationServiceImpl.class, "request", (Object) httpServletRequest0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(user0).getUserid();
      User user1 = mock(User.class, new ViolatedAssumptionAnswer());
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      doReturn(user0, (User) null).when(userMapper0).selectByUsername(anyString());
      Injector.inject(notificationServiceImpl0, (Class<?>) NotificationServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(notificationServiceImpl0, (Class<?>) NotificationServiceImpl.class);
      notificationServiceImpl0.findNotificationsByUser();
      Integer integer0 = new Integer(0);
      notificationServiceImpl0.deleteNotificationByNotificationid(integer0);
      // Undeclared exception!
      try { 
        notificationServiceImpl0.findNotificationsByUser();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.serviceImpl.NotificationServiceImpl", e);
      }
  }
}

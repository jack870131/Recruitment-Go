/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 10 11:06:27 GMT 2020
 */

package com.recruit.recruitment.serviceImpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.recruit.recruitment.config.JwtConfig;
import com.recruit.recruitment.mapper.EvaluatorMapper;
import com.recruit.recruitment.mapper.PostMapper;
import com.recruit.recruitment.mapper.UserMapper;
import com.recruit.recruitment.model.pojo.Evaluator;
import com.recruit.recruitment.model.pojo.Post;
import com.recruit.recruitment.model.pojo.User;
import com.recruit.recruitment.model.repository.PostRepository;
import com.recruit.recruitment.service.EvaluatorService;
import com.recruit.recruitment.serviceImpl.PostServiceImpl;
import com.recruit.recruitment.utils.JwtTokenUtil;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;
import javax.servlet.http.HttpServletRequest;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.data.util.Streamable;
import reactor.core.CoreSubscriber;
import reactor.core.publisher.Operators;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PostServiceImpl_ESTest extends PostServiceImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      EvaluatorMapper evaluatorMapper0 = mock(EvaluatorMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorMapper", (Object) evaluatorMapper0);
      EvaluatorService evaluatorService0 = mock(EvaluatorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorService", (Object) evaluatorService0);
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      JwtConfig jwtConfig0 = new JwtConfig();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      PostMapper postMapper0 = mock(PostMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postMapper", (Object) postMapper0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Iterable) null).when(postRepository0).search(any(org.elasticsearch.index.query.QueryBuilder.class));
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "request", (Object) httpServletRequest0);
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      // Undeclared exception!
      try { 
        postServiceImpl0.searchPosts("TOKEN_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.serviceImpl.PostServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      EvaluatorMapper evaluatorMapper0 = mock(EvaluatorMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorMapper", (Object) evaluatorMapper0);
      EvaluatorService evaluatorService0 = mock(EvaluatorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorService", (Object) evaluatorService0);
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      JwtConfig jwtConfig0 = new JwtConfig();
      jwtConfig0.setHeader("com.recruit.recruitment.serviceImpl.PostServiceImpl");
      jwtConfig0.setPrefix("xj~GD !X");
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      PostMapper postMapper0 = mock(PostMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postMapper", (Object) postMapper0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("\"tiClasses\":[\"ti-valid\"]").when(httpServletRequest0).getHeader(anyString());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "request", (Object) httpServletRequest0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(userMapper0).selectByUsername(anyString());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      // Undeclared exception!
      try { 
        postServiceImpl0.findPostsByEvaluator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.serviceImpl.PostServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      EvaluatorMapper evaluatorMapper0 = mock(EvaluatorMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorMapper", (Object) evaluatorMapper0);
      EvaluatorService evaluatorService0 = mock(EvaluatorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorService", (Object) evaluatorService0);
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      JwtConfig jwtConfig0 = new JwtConfig();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      PostMapper postMapper0 = mock(PostMapper.class, new ViolatedAssumptionAnswer());
      doReturn((List<Object>) null).when(postMapper0).selectByCategory(anyString());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postMapper", (Object) postMapper0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "request", (Object) httpServletRequest0);
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      List<Post> list0 = postServiceImpl0.findPostsByCategory("com.recruit.recruitment.serviceImpl.PostServiceImpl");
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      EvaluatorMapper evaluatorMapper0 = mock(EvaluatorMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorMapper", (Object) evaluatorMapper0);
      EvaluatorService evaluatorService0 = mock(EvaluatorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorService", (Object) evaluatorService0);
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      JwtConfig jwtConfig0 = new JwtConfig();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      Stack<Post> stack0 = new Stack<Post>();
      PostMapper postMapper0 = mock(PostMapper.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(postMapper0).selectByCategory(anyString());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postMapper", (Object) postMapper0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "request", (Object) httpServletRequest0);
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      List<Post> list0 = postServiceImpl0.findPostsByCategory("TOKEN_");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      EvaluatorMapper evaluatorMapper0 = mock(EvaluatorMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorMapper", (Object) evaluatorMapper0);
      EvaluatorService evaluatorService0 = mock(EvaluatorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorService", (Object) evaluatorService0);
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      JwtConfig jwtConfig0 = new JwtConfig();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      ArrayList<Post> arrayList0 = new ArrayList<Post>();
      Post post0 = new Post();
      arrayList0.add(post0);
      PostMapper postMapper0 = mock(PostMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(postMapper0).selectByCategory(anyString());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postMapper", (Object) postMapper0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "request", (Object) httpServletRequest0);
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      List<Post> list0 = postServiceImpl0.findPostsByCategory("TOKEN_");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      EvaluatorMapper evaluatorMapper0 = mock(EvaluatorMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorMapper", (Object) evaluatorMapper0);
      EvaluatorService evaluatorService0 = mock(EvaluatorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorService", (Object) evaluatorService0);
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      JwtConfig jwtConfig0 = new JwtConfig();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      Stack<Post> stack0 = new Stack<Post>();
      PostMapper postMapper0 = mock(PostMapper.class, new ViolatedAssumptionAnswer());
      doReturn(stack0).when(postMapper0).selectAll();
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postMapper", (Object) postMapper0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "request", (Object) httpServletRequest0);
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      List<Post> list0 = postServiceImpl0.findAllPosts();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      EvaluatorMapper evaluatorMapper0 = mock(EvaluatorMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorMapper", (Object) evaluatorMapper0);
      EvaluatorService evaluatorService0 = mock(EvaluatorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorService", (Object) evaluatorService0);
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      JwtConfig jwtConfig0 = new JwtConfig();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      ArrayList<Post> arrayList0 = new ArrayList<Post>();
      Post post0 = new Post();
      arrayList0.add(post0);
      PostMapper postMapper0 = mock(PostMapper.class, new ViolatedAssumptionAnswer());
      doReturn(arrayList0).when(postMapper0).selectAll();
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postMapper", (Object) postMapper0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "request", (Object) httpServletRequest0);
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      List<Post> list0 = postServiceImpl0.findAllPosts();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      EvaluatorMapper evaluatorMapper0 = mock(EvaluatorMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorMapper", (Object) evaluatorMapper0);
      EvaluatorService evaluatorService0 = mock(EvaluatorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorService", (Object) evaluatorService0);
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      JwtConfig jwtConfig0 = new JwtConfig();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      PostMapper postMapper0 = mock(PostMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postMapper", (Object) postMapper0);
      CoreSubscriber<Object> coreSubscriber0 = (CoreSubscriber<Object>) mock(CoreSubscriber.class, new ViolatedAssumptionAnswer());
      Operators.MonoSubscriber<Evaluator, Post> operators_MonoSubscriber0 = new Operators.MonoSubscriber<Evaluator, Post>(coreSubscriber0);
      Streamable<Post> streamable0 = Streamable.of((Iterable<Post>) operators_MonoSubscriber0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      doReturn(streamable0).when(postRepository0).search(any(org.elasticsearch.index.query.QueryBuilder.class));
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "request", (Object) httpServletRequest0);
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      // Undeclared exception!
      try { 
        postServiceImpl0.searchPosts("TOKEN_");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Although QueueSubscription extends Queue it is purely internal and only guarantees support for poll/clear/size/isEmpty. Instances shouldn't be used/exposed as Queue outside of Reactor operators.
         //
         verifyException("reactor.core.Fuseable$QueueSubscription", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      EvaluatorMapper evaluatorMapper0 = mock(EvaluatorMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorMapper", (Object) evaluatorMapper0);
      EvaluatorService evaluatorService0 = mock(EvaluatorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorService", (Object) evaluatorService0);
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      JwtConfig jwtConfig0 = new JwtConfig();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      Post post0 = new Post();
      PostMapper postMapper0 = mock(PostMapper.class, new ViolatedAssumptionAnswer());
      doReturn(post0).when(postMapper0).selectByPrimaryKey(anyInt());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postMapper", (Object) postMapper0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "request", (Object) httpServletRequest0);
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      // Undeclared exception!
      try { 
        postServiceImpl0.findPostByPostid((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.serviceImpl.PostServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      EvaluatorMapper evaluatorMapper0 = mock(EvaluatorMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorMapper", (Object) evaluatorMapper0);
      EvaluatorService evaluatorService0 = mock(EvaluatorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorService", (Object) evaluatorService0);
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      JwtConfig jwtConfig0 = new JwtConfig();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      // Undeclared exception!
      try { 
        postServiceImpl0.findAllPosts();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.serviceImpl.PostServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      EvaluatorMapper evaluatorMapper0 = mock(EvaluatorMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorMapper", (Object) evaluatorMapper0);
      EvaluatorService evaluatorService0 = mock(EvaluatorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorService", (Object) evaluatorService0);
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      JwtConfig jwtConfig0 = new JwtConfig();
      jwtConfig0.setHeader("com.recruit.recruitment.serviceImpl.PostServiceImpl");
      jwtConfig0.setPrefix("xj~GD !X");
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      Post post0 = mock(Post.class, new ViolatedAssumptionAnswer());
      doReturn("8gR3.dg!6", "]\u0001|*Hd_#").when(post0).getDue();
      doReturn("U9W|,~Tr").when(post0).toString();
      PostMapper postMapper0 = mock(PostMapper.class, new ViolatedAssumptionAnswer());
      doReturn(post0).when(postMapper0).selectByPrimaryKey(anyInt());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postMapper", (Object) postMapper0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("T").when(httpServletRequest0).getHeader(anyString());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "request", (Object) httpServletRequest0);
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      Post post1 = postServiceImpl0.findPostByPostid(integer0);
      // Undeclared exception!
      try { 
        postServiceImpl0.addPost(post1, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      EvaluatorMapper evaluatorMapper0 = mock(EvaluatorMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorMapper", (Object) evaluatorMapper0);
      EvaluatorService evaluatorService0 = mock(EvaluatorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorService", (Object) evaluatorService0);
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      JwtConfig jwtConfig0 = new JwtConfig();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      PostMapper postMapper0 = mock(PostMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(postMapper0).deleteByPrimaryKey(anyInt());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postMapper", (Object) postMapper0);
      Integer integer0 = new Integer(0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "request", (Object) httpServletRequest0);
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      postServiceImpl0.deletePost(integer0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      EvaluatorMapper evaluatorMapper0 = mock(EvaluatorMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorMapper", (Object) evaluatorMapper0);
      EvaluatorService evaluatorService0 = mock(EvaluatorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorService", (Object) evaluatorService0);
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      JwtConfig jwtConfig0 = new JwtConfig();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      Post post0 = mock(Post.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(post0).getDue();
      doReturn((String) null).when(post0).toString();
      PostMapper postMapper0 = mock(PostMapper.class, new ViolatedAssumptionAnswer());
      doReturn(post0).when(postMapper0).selectByPrimaryKey(anyInt());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postMapper", (Object) postMapper0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "request", (Object) httpServletRequest0);
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      Post post1 = postServiceImpl0.findPostByPostid(integer0);
      assertNull(post1.getJobname());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      EvaluatorMapper evaluatorMapper0 = mock(EvaluatorMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(evaluatorMapper0).deleteByPostid(anyInt());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorMapper", (Object) evaluatorMapper0);
      EvaluatorService evaluatorService0 = mock(EvaluatorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorService", (Object) evaluatorService0);
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      JwtConfig jwtConfig0 = new JwtConfig();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      PostMapper postMapper0 = mock(PostMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(postMapper0).updateByPrimaryKeySelective(any(com.recruit.recruitment.model.pojo.Post.class));
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postMapper", (Object) postMapper0);
      Evaluator evaluator0 = new Evaluator();
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(postRepository0).save(nullable(java.lang.Object.class));
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "request", (Object) httpServletRequest0);
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      Post post0 = new Post();
      // Undeclared exception!
      try { 
        postServiceImpl0.updatePost((Integer) null, post0, "TOKEN_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.utils.JwtTokenUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      EvaluatorMapper evaluatorMapper0 = mock(EvaluatorMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorMapper", (Object) evaluatorMapper0);
      EvaluatorService evaluatorService0 = mock(EvaluatorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorService", (Object) evaluatorService0);
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      JwtConfig jwtConfig0 = new JwtConfig();
      jwtConfig0.setHeader("TOKEN_");
      jwtConfig0.setPrefix("TOKEN_");
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      Post post0 = mock(Post.class, new ViolatedAssumptionAnswer());
      doReturn("TOKEN_", "TOKEN_", "TOKEN_", "").when(post0).getDue();
      doReturn("TOKEN_").when(post0).toString();
      PostMapper postMapper0 = mock(PostMapper.class, new ViolatedAssumptionAnswer());
      doReturn(post0).when(postMapper0).selectByPrimaryKey(anyInt());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postMapper", (Object) postMapper0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("TOKEN_").when(httpServletRequest0).getHeader(anyString());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "request", (Object) httpServletRequest0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(userMapper0).selectByUsername(anyString());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      Post post1 = postServiceImpl0.findPostByPostid(integer0);
      // Undeclared exception!
      try { 
        postServiceImpl0.addPost(post1, "TOKEN_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.serviceImpl.PostServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      EvaluatorMapper evaluatorMapper0 = mock(EvaluatorMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorMapper", (Object) evaluatorMapper0);
      EvaluatorService evaluatorService0 = mock(EvaluatorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorService", (Object) evaluatorService0);
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      JwtConfig jwtConfig0 = new JwtConfig();
      jwtConfig0.setHeader("com.recruit.recruitment.serviceImpl.PostServiceImpl");
      jwtConfig0.setPrefix("xj~GD !X");
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      PostMapper postMapper0 = mock(PostMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postMapper", (Object) postMapper0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("\"tiClasses\":[\"ti-valid\"]").when(httpServletRequest0).getHeader(anyString());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "request", (Object) httpServletRequest0);
      User user0 = new User();
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(userMapper0).selectByUsername(anyString());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      Post post0 = new Post();
      // Undeclared exception!
      try { 
        postServiceImpl0.addPost(post0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.serviceImpl.PostServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      EvaluatorMapper evaluatorMapper0 = mock(EvaluatorMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorMapper", (Object) evaluatorMapper0);
      EvaluatorService evaluatorService0 = mock(EvaluatorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorService", (Object) evaluatorService0);
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      JwtConfig jwtConfig0 = new JwtConfig();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      PostMapper postMapper0 = mock(PostMapper.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(postMapper0).selectAll();
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postMapper", (Object) postMapper0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "request", (Object) httpServletRequest0);
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      List<Post> list0 = postServiceImpl0.findAllPosts();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PostServiceImpl postServiceImpl0 = new PostServiceImpl();
      EvaluatorMapper evaluatorMapper0 = mock(EvaluatorMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorMapper", (Object) evaluatorMapper0);
      EvaluatorService evaluatorService0 = mock(EvaluatorService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "evaluatorService", (Object) evaluatorService0);
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      JwtConfig jwtConfig0 = new JwtConfig();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      PostMapper postMapper0 = mock(PostMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postMapper", (Object) postMapper0);
      PostRepository postRepository0 = mock(PostRepository.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "postRepository", (Object) postRepository0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "request", (Object) httpServletRequest0);
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(postServiceImpl0, (Class<?>) PostServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(postServiceImpl0, (Class<?>) PostServiceImpl.class);
      // Undeclared exception!
      try { 
        postServiceImpl0.searchPosts((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // query text missing
         //
         verifyException("org.elasticsearch.index.query.QueryStringQueryBuilder", e);
      }
  }
}

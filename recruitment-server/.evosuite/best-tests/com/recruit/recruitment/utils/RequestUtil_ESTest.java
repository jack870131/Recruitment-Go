/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 10 11:01:20 GMT 2020
 */

package com.recruit.recruitment.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.recruit.recruitment.utils.RequestUtil;
import javax.servlet.ServletRequestWrapper;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RequestUtil_ESTest extends RequestUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RequestUtil requestUtil0 = new RequestUtil();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getRemoteAddr();
      doReturn(":pN$l5{CU", ":pN$l5{CU", "DeserializationProblemHandler.handleUnexpectedToken() for type %s returned value of type %s", "s]wzK-BA:C", "").when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      String string0 = requestUtil0.getIpAddress(httpServletRequestWrapper0);
      httpServletRequestWrapper0.getHeader("upgradeHandler.rst.debug");
      requestUtil0.getIpAddress(httpServletRequestWrapper0);
      requestUtil0.getIpAddress(httpServletRequestWrapper0);
      String string1 = requestUtil0.getIpAddress(httpServletRequestWrapper0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RequestUtil requestUtil0 = new RequestUtil();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      httpServletRequestWrapper0.setRequest(httpServletRequestWrapper0);
      // Undeclared exception!
      try { 
        requestUtil0.getIpAddress(httpServletRequestWrapper0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RequestUtil requestUtil0 = new RequestUtil();
      // Undeclared exception!
      try { 
        requestUtil0.getIpAddress((HttpServletRequest) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.utils.RequestUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RequestUtil requestUtil0 = new RequestUtil();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(httpServletRequestWrapper0);
      httpServletRequestWrapper0.setRequest(servletRequestWrapper0);
      // Undeclared exception!
      try { 
        requestUtil0.getIpAddress(httpServletRequestWrapper0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RequestUtil requestUtil0 = new RequestUtil();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null).when(httpServletRequest0).getRemoteAddr();
      doReturn("C-GgtK", (String) null, (String) null, (String) null, (String) null).when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      String string0 = requestUtil0.getIpAddress(httpServletRequestWrapper0);
      requestUtil0.getIpAddress(httpServletRequestWrapper0);
      requestUtil0.getIpAddress(httpServletRequestWrapper0);
      requestUtil0.getIpAddress(httpServletRequestWrapper0);
      String string1 = requestUtil0.getIpAddress(httpServletRequestWrapper0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RequestUtil requestUtil0 = new RequestUtil();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getRemoteAddr();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      String string0 = requestUtil0.getIpAddress(httpServletRequestWrapper0);
      assertNull(string0);
  }
}

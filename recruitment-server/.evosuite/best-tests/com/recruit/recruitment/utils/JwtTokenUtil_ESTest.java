/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 10 11:22:13 GMT 2020
 */

package com.recruit.recruitment.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.recruit.recruitment.config.JwtConfig;
import com.recruit.recruitment.utils.JwtTokenUtil;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JwtTokenUtil_ESTest extends JwtTokenUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      assertNotNull(jwtTokenUtil0);
      
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn("com.fasterxml.jackson.databind.deser.std.CollectionDeserializer").when(jwtConfig0).getHeader();
      doReturn("").when(jwtConfig0).getPrefix();
      doReturn("cDVaJ0m|_", "cDVaJ0m|_", "cDVaJ0m|_", "cDVaJ0m|_", "cDVaJ0m|_").when(jwtConfig0).getSecret();
      doReturn(31L).when(jwtConfig0).getTime();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      LinkedList<SimpleGrantedAuthority> linkedList0 = new LinkedList<SimpleGrantedAuthority>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      SimpleGrantedAuthority simpleGrantedAuthority0 = new SimpleGrantedAuthority("TOKEN_");
      assertNotNull(simpleGrantedAuthority0);
      assertEquals("TOKEN_", simpleGrantedAuthority0.getAuthority());
      assertEquals("TOKEN_", simpleGrantedAuthority0.toString());
      
      boolean boolean0 = linkedList0.add(simpleGrantedAuthority0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("TOKEN_", simpleGrantedAuthority0.getAuthority());
      assertEquals("TOKEN_", simpleGrantedAuthority0.toString());
      assertTrue(linkedList0.contains(simpleGrantedAuthority0));
      
      User user0 = new User("TOKEN_", "cDVaJ0m|_", true, true, true, true, linkedList0);
      assertNotNull(user0);
      assertEquals(1, linkedList0.size());
      assertTrue(user0.isAccountNonLocked());
      assertEquals("cDVaJ0m|_", user0.getPassword());
      assertTrue(user0.isEnabled());
      assertTrue(user0.isAccountNonExpired());
      assertTrue(user0.isCredentialsNonExpired());
      assertEquals("TOKEN_", user0.getUsername());
      assertTrue(linkedList0.contains(simpleGrantedAuthority0));
      
      String string0 = jwtTokenUtil0.generateToken(user0);
      assertNotNull(string0);
      assertEquals("eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUT0tFTl8iLCJjcmVhdGVkIjoxMzkyNDA5MjgxMzIwLCJyb2xlcyI6WyJUT0tFTl8iXSwiZXhwIjoxMzkyNDA5MzEyfQ.UEtuReZ_aotS850k6p8nq6DTzXzzqQ9tnLXhFRrw-6jAJGCQ8KaNL88GaFAPc-Ccr5JZObEf4QhKRf5Qi193uw", string0);
      assertEquals(1, linkedList0.size());
      assertTrue(user0.isAccountNonLocked());
      assertEquals("cDVaJ0m|_", user0.getPassword());
      assertTrue(user0.isEnabled());
      assertTrue(user0.isAccountNonExpired());
      assertTrue(user0.isCredentialsNonExpired());
      assertEquals("TOKEN_", user0.getUsername());
      assertTrue(linkedList0.contains(simpleGrantedAuthority0));
      
      Boolean boolean1 = jwtTokenUtil0.canTokenBeRefreshed("eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUT0tFTl8iLCJjcmVhdGVkIjoxMzkyNDA5MjgxMzIwLCJyb2xlcyI6WyJUT0tFTl8iXSwiZXhwIjoxMzkyNDA5MzEyfQ.UEtuReZ_aotS850k6p8nq6DTzXzzqQ9tnLXhFRrw-6jAJGCQ8KaNL88GaFAPc-Ccr5JZObEf4QhKRf5Qi193uw");
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      List<String> list0 = jwtTokenUtil0.getRolesFromToken("cDVaJ0m|_");
      assertNull(list0);
      
      Date date0 = jwtTokenUtil0.getExpirationDateFromToken("j;M9.");
      assertNull(date0);
      
      Date date1 = jwtTokenUtil0.getCreatedDateFromToken("j;M9.");
      assertNull(date1);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUT0tFTl8iLCJjcmVhdGVkIjoxMzkyNDA5MjgxMzIwLCJyb2xlcyI6WyJUT0tFTl8iXSwiZXhwIjoxMzkyNDA5MzEyfQ.UEtuReZ_aotS850k6p8nq6DTzXzzqQ9tnLXhFRrw-6jAJGCQ8KaNL88GaFAPc-Ccr5JZObEf4QhKRf5Qi193uw").when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      String string1 = jwtTokenUtil0.getUsernameFromRequest(httpServletRequestWrapper0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("TOKEN_", string1);
      
      Date date2 = jwtTokenUtil0.getCreatedDateFromToken("roles");
      assertNull(date2);
      
      String string2 = jwtTokenUtil0.getUsernameFromToken("eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUT0tFTl8iLCJjcmVhdGVkIjoxMzkyNDA5MjgxMzIwLCJyb2xlcyI6WyJUT0tFTl8iXSwiZXhwIjoxMzkyNDA5MzEyfQ.UEtuReZ_aotS850k6p8nq6DTzXzzqQ9tnLXhFRrw-6jAJGCQ8KaNL88GaFAPc-Ccr5JZObEf4QhKRf5Qi193uw");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("TOKEN_", string2);
      
      // Undeclared exception!
      try { 
        jwtTokenUtil0.canTokenBeRefreshed("JKP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.utils.JwtTokenUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      assertNotNull(jwtTokenUtil0);
      
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn("cDVaJ0m|_", "cDVaJ0m|_", "cDVaJ0m|_", "cDVaJ0m|_", "cDVaJ0m|_").when(jwtConfig0).getSecret();
      doReturn(31L).when(jwtConfig0).getTime();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      LinkedList<SimpleGrantedAuthority> linkedList0 = new LinkedList<SimpleGrantedAuthority>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      SimpleGrantedAuthority simpleGrantedAuthority0 = new SimpleGrantedAuthority("TOKEN_");
      assertNotNull(simpleGrantedAuthority0);
      assertEquals("TOKEN_", simpleGrantedAuthority0.toString());
      assertEquals("TOKEN_", simpleGrantedAuthority0.getAuthority());
      
      boolean boolean0 = linkedList0.add(simpleGrantedAuthority0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("TOKEN_", simpleGrantedAuthority0.toString());
      assertEquals("TOKEN_", simpleGrantedAuthority0.getAuthority());
      assertTrue(linkedList0.contains(simpleGrantedAuthority0));
      
      User user0 = new User("TOKEN_", "cDVaJ0m|_", true, true, true, true, linkedList0);
      assertNotNull(user0);
      assertEquals(1, linkedList0.size());
      assertTrue(user0.isEnabled());
      assertEquals("cDVaJ0m|_", user0.getPassword());
      assertTrue(user0.isAccountNonLocked());
      assertTrue(user0.isCredentialsNonExpired());
      assertTrue(user0.isAccountNonExpired());
      assertEquals("TOKEN_", user0.getUsername());
      assertTrue(linkedList0.contains(simpleGrantedAuthority0));
      
      String string0 = jwtTokenUtil0.generateToken(user0);
      assertNotNull(string0);
      assertEquals("eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUT0tFTl8iLCJjcmVhdGVkIjoxMzkyNDA5MjgxMzIwLCJyb2xlcyI6WyJUT0tFTl8iXSwiZXhwIjoxMzkyNDA5MzEyfQ.UEtuReZ_aotS850k6p8nq6DTzXzzqQ9tnLXhFRrw-6jAJGCQ8KaNL88GaFAPc-Ccr5JZObEf4QhKRf5Qi193uw", string0);
      assertEquals(1, linkedList0.size());
      assertTrue(user0.isEnabled());
      assertEquals("cDVaJ0m|_", user0.getPassword());
      assertTrue(user0.isAccountNonLocked());
      assertTrue(user0.isCredentialsNonExpired());
      assertTrue(user0.isAccountNonExpired());
      assertEquals("TOKEN_", user0.getUsername());
      assertTrue(linkedList0.contains(simpleGrantedAuthority0));
      
      Boolean boolean1 = jwtTokenUtil0.canTokenBeRefreshed("eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUT0tFTl8iLCJjcmVhdGVkIjoxMzkyNDA5MjgxMzIwLCJyb2xlcyI6WyJUT0tFTl8iXSwiZXhwIjoxMzkyNDA5MzEyfQ.UEtuReZ_aotS850k6p8nq6DTzXzzqQ9tnLXhFRrw-6jAJGCQ8KaNL88GaFAPc-Ccr5JZObEf4QhKRf5Qi193uw");
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      String string1 = "com.fasterxml.jackson.databind.node.IntNode";
      List<String> list0 = jwtTokenUtil0.getRolesFromToken("com.fasterxml.jackson.databind.node.IntNode");
      assertNull(list0);
      
      Date date0 = jwtTokenUtil0.getExpirationDateFromToken("eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUT0tFTl8iLCJjcmVhdGVkIjoxMzkyNDA5MjgxMzIwLCJyb2xlcyI6WyJUT0tFTl8iXSwiZXhwIjoxMzkyNDA5MzEyfQ.UEtuReZ_aotS850k6p8nq6DTzXzzqQ9tnLXhFRrw-6jAJGCQ8KaNL88GaFAPc-Ccr5JZObEf4QhKRf5Qi193uw");
      assertNotNull(date0);
      assertEquals("Fri Feb 14 20:21:52 GMT 2014", date0.toString());
      
      // Undeclared exception!
      try { 
        jwtTokenUtil0.isTokenExpired("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.utils.JwtTokenUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      assertNotNull(jwtTokenUtil0);
      
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn("cDVaJ0m|_").when(jwtConfig0).getHeader();
      doReturn("Q|QZ:jaY5i+?J-").when(jwtConfig0).getPrefix();
      doReturn("cDVaJ0m|_", "cDVaJ0m|_", "cDVaJ0m|_", "cDVaJ0m|_", "cDVaJ0m|_").when(jwtConfig0).getSecret();
      doReturn(31L).when(jwtConfig0).getTime();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      LinkedList<SimpleGrantedAuthority> linkedList0 = new LinkedList<SimpleGrantedAuthority>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      SimpleGrantedAuthority simpleGrantedAuthority0 = new SimpleGrantedAuthority("TOKEN_");
      assertNotNull(simpleGrantedAuthority0);
      assertEquals("TOKEN_", simpleGrantedAuthority0.toString());
      assertEquals("TOKEN_", simpleGrantedAuthority0.getAuthority());
      
      boolean boolean0 = linkedList0.add(simpleGrantedAuthority0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("TOKEN_", simpleGrantedAuthority0.toString());
      assertEquals("TOKEN_", simpleGrantedAuthority0.getAuthority());
      assertTrue(linkedList0.contains(simpleGrantedAuthority0));
      
      User user0 = new User("TOKEN_", "cDVaJ0m|_", true, true, true, true, linkedList0);
      assertNotNull(user0);
      assertEquals(1, linkedList0.size());
      assertTrue(user0.isEnabled());
      assertEquals("cDVaJ0m|_", user0.getPassword());
      assertTrue(user0.isCredentialsNonExpired());
      assertTrue(user0.isAccountNonExpired());
      assertTrue(user0.isAccountNonLocked());
      assertEquals("TOKEN_", user0.getUsername());
      assertTrue(linkedList0.contains(simpleGrantedAuthority0));
      
      String string0 = jwtTokenUtil0.generateToken(user0);
      assertNotNull(string0);
      assertEquals("eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUT0tFTl8iLCJjcmVhdGVkIjoxMzkyNDA5MjgxMzIwLCJyb2xlcyI6WyJUT0tFTl8iXSwiZXhwIjoxMzkyNDA5MzEyfQ.UEtuReZ_aotS850k6p8nq6DTzXzzqQ9tnLXhFRrw-6jAJGCQ8KaNL88GaFAPc-Ccr5JZObEf4QhKRf5Qi193uw", string0);
      assertEquals(1, linkedList0.size());
      assertTrue(user0.isEnabled());
      assertEquals("cDVaJ0m|_", user0.getPassword());
      assertTrue(user0.isCredentialsNonExpired());
      assertTrue(user0.isAccountNonExpired());
      assertTrue(user0.isAccountNonLocked());
      assertEquals("TOKEN_", user0.getUsername());
      assertTrue(linkedList0.contains(simpleGrantedAuthority0));
      
      Boolean boolean1 = jwtTokenUtil0.canTokenBeRefreshed("eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUT0tFTl8iLCJjcmVhdGVkIjoxMzkyNDA5MjgxMzIwLCJyb2xlcyI6WyJUT0tFTl8iXSwiZXhwIjoxMzkyNDA5MzEyfQ.UEtuReZ_aotS850k6p8nq6DTzXzzqQ9tnLXhFRrw-6jAJGCQ8KaNL88GaFAPc-Ccr5JZObEf4QhKRf5Qi193uw");
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      List<String> list0 = jwtTokenUtil0.getRolesFromToken("cDVaJ0m|_");
      assertNull(list0);
      
      Date date0 = jwtTokenUtil0.getExpirationDateFromToken("j;M9.");
      assertNull(date0);
      
      Date date1 = jwtTokenUtil0.getCreatedDateFromToken("j;M9.");
      assertNull(date1);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("_1v,YS2/cPi(f@").when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      String string1 = jwtTokenUtil0.getUsernameFromRequest(httpServletRequestWrapper0);
      assertNull(string1);
      
      Date date2 = jwtTokenUtil0.getCreatedDateFromToken("roles");
      assertNull(date2);
      
      String string2 = jwtTokenUtil0.getUsernameFromToken("eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUT0tFTl8iLCJjcmVhdGVkIjoxMzkyNDA5MjgxMzIwLCJyb2xlcyI6WyJUT0tFTl8iXSwiZXhwIjoxMzkyNDA5MzEyfQ.UEtuReZ_aotS850k6p8nq6DTzXzzqQ9tnLXhFRrw-6jAJGCQ8KaNL88GaFAPc-Ccr5JZObEf4QhKRf5Qi193uw");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("TOKEN_", string2);
      
      // Undeclared exception!
      try { 
        jwtTokenUtil0.canTokenBeRefreshed("JKP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.utils.JwtTokenUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      assertNotNull(jwtTokenUtil0);
      
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn("cDVaJ0m|_", "cDVaJ0m|_", "cDVaJ0m|_", "cDVaJ0m|_", "cDVaJ0m|_").when(jwtConfig0).getSecret();
      doReturn(31L).when(jwtConfig0).getTime();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      LinkedList<SimpleGrantedAuthority> linkedList0 = new LinkedList<SimpleGrantedAuthority>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      SimpleGrantedAuthority simpleGrantedAuthority0 = new SimpleGrantedAuthority("TOKEN_");
      assertNotNull(simpleGrantedAuthority0);
      assertEquals("TOKEN_", simpleGrantedAuthority0.getAuthority());
      assertEquals("TOKEN_", simpleGrantedAuthority0.toString());
      
      boolean boolean0 = linkedList0.add(simpleGrantedAuthority0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("TOKEN_", simpleGrantedAuthority0.getAuthority());
      assertEquals("TOKEN_", simpleGrantedAuthority0.toString());
      assertTrue(linkedList0.contains(simpleGrantedAuthority0));
      
      User user0 = new User("TOKEN_", "cDVaJ0m|_", true, true, true, true, linkedList0);
      assertNotNull(user0);
      assertEquals(1, linkedList0.size());
      assertTrue(user0.isEnabled());
      assertTrue(user0.isAccountNonExpired());
      assertTrue(user0.isAccountNonLocked());
      assertEquals("TOKEN_", user0.getUsername());
      assertTrue(user0.isCredentialsNonExpired());
      assertEquals("cDVaJ0m|_", user0.getPassword());
      assertTrue(linkedList0.contains(simpleGrantedAuthority0));
      
      String string0 = jwtTokenUtil0.generateToken(user0);
      assertNotNull(string0);
      assertEquals("eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUT0tFTl8iLCJjcmVhdGVkIjoxMzkyNDA5MjgxMzIwLCJyb2xlcyI6WyJUT0tFTl8iXSwiZXhwIjoxMzkyNDA5MzEyfQ.UEtuReZ_aotS850k6p8nq6DTzXzzqQ9tnLXhFRrw-6jAJGCQ8KaNL88GaFAPc-Ccr5JZObEf4QhKRf5Qi193uw", string0);
      assertEquals(1, linkedList0.size());
      assertTrue(user0.isEnabled());
      assertTrue(user0.isAccountNonExpired());
      assertTrue(user0.isAccountNonLocked());
      assertEquals("TOKEN_", user0.getUsername());
      assertTrue(user0.isCredentialsNonExpired());
      assertEquals("cDVaJ0m|_", user0.getPassword());
      assertTrue(linkedList0.contains(simpleGrantedAuthority0));
      
      Boolean boolean1 = jwtTokenUtil0.canTokenBeRefreshed("eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUT0tFTl8iLCJjcmVhdGVkIjoxMzkyNDA5MjgxMzIwLCJyb2xlcyI6WyJUT0tFTl8iXSwiZXhwIjoxMzkyNDA5MzEyfQ.UEtuReZ_aotS850k6p8nq6DTzXzzqQ9tnLXhFRrw-6jAJGCQ8KaNL88GaFAPc-Ccr5JZObEf4QhKRf5Qi193uw");
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      String string1 = "com.fasterxml.jackson.databind.node.IntNode";
      List<String> list0 = jwtTokenUtil0.getRolesFromToken("com.fasterxml.jackson.databind.node.IntNode");
      assertNull(list0);
      
      String string2 = "w;M9.";
      Date date0 = jwtTokenUtil0.getCreatedDateFromToken("eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUT0tFTl8iLCJjcmVhdGVkIjoxMzkyNDA5MjgxMzIwLCJyb2xlcyI6WyJUT0tFTl8iXSwiZXhwIjoxMzkyNDA5MzEyfQ.UEtuReZ_aotS850k6p8nq6DTzXzzqQ9tnLXhFRrw-6jAJGCQ8KaNL88GaFAPc-Ccr5JZObEf4QhKRf5Qi193uw");
      assertNotNull(date0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      // Undeclared exception!
      try { 
        jwtTokenUtil0.isTokenExpired("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.utils.JwtTokenUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      assertNotNull(jwtTokenUtil0);
      
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn("roles", (String) null).when(jwtConfig0).getSecret();
      doReturn(969L).when(jwtConfig0).getTime();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      LinkedList<SimpleGrantedAuthority> linkedList0 = new LinkedList<SimpleGrantedAuthority>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      User user0 = new User("TOKEN_", "TOKEN_", true, true, true, true, linkedList0);
      assertNotNull(user0);
      assertEquals(0, linkedList0.size());
      assertEquals("TOKEN_", user0.getUsername());
      assertTrue(user0.isCredentialsNonExpired());
      assertTrue(user0.isAccountNonExpired());
      assertTrue(user0.isAccountNonLocked());
      assertTrue(user0.isEnabled());
      assertEquals("TOKEN_", user0.getPassword());
      
      String string0 = jwtTokenUtil0.generateToken(user0);
      assertNotNull(string0);
      assertEquals("eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUT0tFTl8iLCJjcmVhdGVkIjoxMzkyNDA5MjgxMzIwLCJyb2xlcyI6W10sImV4cCI6MTM5MjQxMDI1MH0.mA7OrjqCGPS8MTaU9QqM1Bozd9IcLtM4YqiMTIHNHcHr_G29eoBSSnPqnWZOrIss6QSNzXIeYfYoZO7cP6lRig", string0);
      assertEquals(0, linkedList0.size());
      assertEquals("TOKEN_", user0.getUsername());
      assertTrue(user0.isCredentialsNonExpired());
      assertTrue(user0.isAccountNonExpired());
      assertTrue(user0.isAccountNonLocked());
      assertTrue(user0.isEnabled());
      assertEquals("TOKEN_", user0.getPassword());
      
      String string1 = jwtTokenUtil0.refreshToken("eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUT0tFTl8iLCJjcmVhdGVkIjoxMzkyNDA5MjgxMzIwLCJyb2xlcyI6W10sImV4cCI6MTM5MjQxMDI1MH0.mA7OrjqCGPS8MTaU9QqM1Bozd9IcLtM4YqiMTIHNHcHr_G29eoBSSnPqnWZOrIss6QSNzXIeYfYoZO7cP6lRig");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUT0tFTl8iLCJjcmVhdGVkIjoxMzkyNDA5MjgxMzIwLCJyb2xlcyI6W10sImV4cCI6MTM5MjQxMDI1MH0.mA7OrjqCGPS8MTaU9QqM1Bozd9IcLtM4YqiMTIHNHcHr_G29eoBSSnPqnWZOrIss6QSNzXIeYfYoZO7cP6lRig", string1);
      
      Random.setNextRandom((-1452));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      assertNotNull(jwtTokenUtil0);
      
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn("cDVaJ0m|_", "cDVaJ0m|_", "cDVaJ0m|_", "cDVaJ0m|_", "cDVaJ0m|_").when(jwtConfig0).getSecret();
      doReturn(31L).when(jwtConfig0).getTime();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      LinkedList<SimpleGrantedAuthority> linkedList0 = new LinkedList<SimpleGrantedAuthority>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      SimpleGrantedAuthority simpleGrantedAuthority0 = new SimpleGrantedAuthority("TOKEN_");
      assertNotNull(simpleGrantedAuthority0);
      assertEquals("TOKEN_", simpleGrantedAuthority0.getAuthority());
      assertEquals("TOKEN_", simpleGrantedAuthority0.toString());
      
      boolean boolean0 = linkedList0.add(simpleGrantedAuthority0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("TOKEN_", simpleGrantedAuthority0.getAuthority());
      assertEquals("TOKEN_", simpleGrantedAuthority0.toString());
      assertTrue(linkedList0.contains(simpleGrantedAuthority0));
      
      User user0 = new User("TOKEN_", "cDVaJ0m|_", false, false, false, false, linkedList0);
      assertNotNull(user0);
      assertEquals(1, linkedList0.size());
      assertFalse(user0.isAccountNonLocked());
      assertEquals("cDVaJ0m|_", user0.getPassword());
      assertFalse(user0.isAccountNonExpired());
      assertEquals("TOKEN_", user0.getUsername());
      assertFalse(user0.isEnabled());
      assertFalse(user0.isCredentialsNonExpired());
      assertTrue(linkedList0.contains(simpleGrantedAuthority0));
      
      String string0 = jwtTokenUtil0.generateToken(user0);
      assertNotNull(string0);
      assertEquals("eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUT0tFTl8iLCJjcmVhdGVkIjoxMzkyNDA5MjgxMzIwLCJyb2xlcyI6WyJUT0tFTl8iXSwiZXhwIjoxMzkyNDA5MzEyfQ.UEtuReZ_aotS850k6p8nq6DTzXzzqQ9tnLXhFRrw-6jAJGCQ8KaNL88GaFAPc-Ccr5JZObEf4QhKRf5Qi193uw", string0);
      assertEquals(1, linkedList0.size());
      assertFalse(user0.isAccountNonLocked());
      assertEquals("cDVaJ0m|_", user0.getPassword());
      assertFalse(user0.isAccountNonExpired());
      assertEquals("TOKEN_", user0.getUsername());
      assertFalse(user0.isEnabled());
      assertFalse(user0.isCredentialsNonExpired());
      assertTrue(linkedList0.contains(simpleGrantedAuthority0));
      
      Boolean boolean1 = jwtTokenUtil0.isTokenExpired("eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUT0tFTl8iLCJjcmVhdGVkIjoxMzkyNDA5MjgxMzIwLCJyb2xlcyI6WyJUT0tFTl8iXSwiZXhwIjoxMzkyNDA5MzEyfQ.UEtuReZ_aotS850k6p8nq6DTzXzzqQ9tnLXhFRrw-6jAJGCQ8KaNL88GaFAPc-Ccr5JZObEf4QhKRf5Qi193uw");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      List<String> list0 = jwtTokenUtil0.getRolesFromToken("eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUT0tFTl8iLCJjcmVhdGVkIjoxMzkyNDA5MjgxMzIwLCJyb2xlcyI6WyJUT0tFTl8iXSwiZXhwIjoxMzkyNDA5MzEyfQ.UEtuReZ_aotS850k6p8nq6DTzXzzqQ9tnLXhFRrw-6jAJGCQ8KaNL88GaFAPc-Ccr5JZObEf4QhKRf5Qi193uw");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(list0.contains("TOKEN_"));
      assertFalse(list0.contains("cDVaJ0m|_"));
      
      String string1 = "j;M9.";
      Date date0 = jwtTokenUtil0.getExpirationDateFromToken("j;M9.");
      assertNull(date0);
      
      // Undeclared exception!
      try { 
        jwtTokenUtil0.isTokenExpired("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.utils.JwtTokenUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      assertNotNull(jwtTokenUtil0);
      
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn("cDVaJ0m|_", "cDVaJ0m|_", "cDVaJ0m|_", "cDVaJ0m|_", "cDVaJ0m|_").when(jwtConfig0).getSecret();
      doReturn(31L).when(jwtConfig0).getTime();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      LinkedList<SimpleGrantedAuthority> linkedList0 = new LinkedList<SimpleGrantedAuthority>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      SimpleGrantedAuthority simpleGrantedAuthority0 = new SimpleGrantedAuthority("TOKEN_");
      assertNotNull(simpleGrantedAuthority0);
      assertEquals("TOKEN_", simpleGrantedAuthority0.toString());
      assertEquals("TOKEN_", simpleGrantedAuthority0.getAuthority());
      
      boolean boolean0 = linkedList0.add(simpleGrantedAuthority0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("TOKEN_", simpleGrantedAuthority0.toString());
      assertEquals("TOKEN_", simpleGrantedAuthority0.getAuthority());
      assertTrue(linkedList0.contains(simpleGrantedAuthority0));
      
      User user0 = new User("TOKEN_", "cDVaJ0m|_", true, true, true, true, linkedList0);
      assertNotNull(user0);
      assertEquals(1, linkedList0.size());
      assertEquals("cDVaJ0m|_", user0.getPassword());
      assertTrue(user0.isAccountNonLocked());
      assertEquals("TOKEN_", user0.getUsername());
      assertTrue(user0.isCredentialsNonExpired());
      assertTrue(user0.isEnabled());
      assertTrue(user0.isAccountNonExpired());
      assertTrue(linkedList0.contains(simpleGrantedAuthority0));
      
      String string0 = jwtTokenUtil0.generateToken(user0);
      assertNotNull(string0);
      assertEquals("eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUT0tFTl8iLCJjcmVhdGVkIjoxMzkyNDA5MjgxMzIwLCJyb2xlcyI6WyJUT0tFTl8iXSwiZXhwIjoxMzkyNDA5MzEyfQ.UEtuReZ_aotS850k6p8nq6DTzXzzqQ9tnLXhFRrw-6jAJGCQ8KaNL88GaFAPc-Ccr5JZObEf4QhKRf5Qi193uw", string0);
      assertEquals(1, linkedList0.size());
      assertEquals("cDVaJ0m|_", user0.getPassword());
      assertTrue(user0.isAccountNonLocked());
      assertEquals("TOKEN_", user0.getUsername());
      assertTrue(user0.isCredentialsNonExpired());
      assertTrue(user0.isEnabled());
      assertTrue(user0.isAccountNonExpired());
      assertTrue(linkedList0.contains(simpleGrantedAuthority0));
      
      Boolean boolean1 = jwtTokenUtil0.canTokenBeRefreshed("eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUT0tFTl8iLCJjcmVhdGVkIjoxMzkyNDA5MjgxMzIwLCJyb2xlcyI6WyJUT0tFTl8iXSwiZXhwIjoxMzkyNDA5MzEyfQ.UEtuReZ_aotS850k6p8nq6DTzXzzqQ9tnLXhFRrw-6jAJGCQ8KaNL88GaFAPc-Ccr5JZObEf4QhKRf5Qi193uw");
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      List<String> list0 = jwtTokenUtil0.getRolesFromToken("com.fasterxml.jackson.databind.node.IntNode");
      assertNull(list0);
      
      String string1 = "j;M9.";
      Date date0 = jwtTokenUtil0.getExpirationDateFromToken("j;M9.");
      assertNull(date0);
      
      // Undeclared exception!
      try { 
        jwtTokenUtil0.isTokenExpired("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.utils.JwtTokenUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      assertNotNull(jwtTokenUtil0);
      
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn("cDVaJ0m|_", "cDVaJ0m|_", (String) null, (String) null, (String) null).when(jwtConfig0).getSecret();
      doReturn(31L).when(jwtConfig0).getTime();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      LinkedList<SimpleGrantedAuthority> linkedList0 = new LinkedList<SimpleGrantedAuthority>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      SimpleGrantedAuthority simpleGrantedAuthority0 = new SimpleGrantedAuthority("TOKEN_");
      assertNotNull(simpleGrantedAuthority0);
      assertEquals("TOKEN_", simpleGrantedAuthority0.toString());
      assertEquals("TOKEN_", simpleGrantedAuthority0.getAuthority());
      
      boolean boolean0 = linkedList0.add(simpleGrantedAuthority0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("TOKEN_", simpleGrantedAuthority0.toString());
      assertEquals("TOKEN_", simpleGrantedAuthority0.getAuthority());
      assertTrue(linkedList0.contains(simpleGrantedAuthority0));
      
      User user0 = new User("TOKEN_", "cDVaJ0m|_", false, false, false, false, linkedList0);
      assertNotNull(user0);
      assertEquals(1, linkedList0.size());
      assertEquals("cDVaJ0m|_", user0.getPassword());
      assertFalse(user0.isAccountNonLocked());
      assertFalse(user0.isCredentialsNonExpired());
      assertFalse(user0.isAccountNonExpired());
      assertEquals("TOKEN_", user0.getUsername());
      assertFalse(user0.isEnabled());
      assertTrue(linkedList0.contains(simpleGrantedAuthority0));
      
      String string0 = jwtTokenUtil0.generateToken(user0);
      assertNotNull(string0);
      assertEquals("eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUT0tFTl8iLCJjcmVhdGVkIjoxMzkyNDA5MjgxMzIwLCJyb2xlcyI6WyJUT0tFTl8iXSwiZXhwIjoxMzkyNDA5MzEyfQ.UEtuReZ_aotS850k6p8nq6DTzXzzqQ9tnLXhFRrw-6jAJGCQ8KaNL88GaFAPc-Ccr5JZObEf4QhKRf5Qi193uw", string0);
      assertEquals(1, linkedList0.size());
      assertEquals("cDVaJ0m|_", user0.getPassword());
      assertFalse(user0.isAccountNonLocked());
      assertFalse(user0.isCredentialsNonExpired());
      assertFalse(user0.isAccountNonExpired());
      assertEquals("TOKEN_", user0.getUsername());
      assertFalse(user0.isEnabled());
      assertTrue(linkedList0.contains(simpleGrantedAuthority0));
      
      Boolean boolean1 = jwtTokenUtil0.isTokenExpired("eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUT0tFTl8iLCJjcmVhdGVkIjoxMzkyNDA5MjgxMzIwLCJyb2xlcyI6WyJUT0tFTl8iXSwiZXhwIjoxMzkyNDA5MzEyfQ.UEtuReZ_aotS850k6p8nq6DTzXzzqQ9tnLXhFRrw-6jAJGCQ8KaNL88GaFAPc-Ccr5JZObEf4QhKRf5Qi193uw");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      List<String> list0 = jwtTokenUtil0.getRolesFromToken("com.fasterxml.jackson.databind.node.IntNode");
      assertNull(list0);
      
      String string1 = "j;M9.";
      Date date0 = jwtTokenUtil0.getExpirationDateFromToken("j;M9.");
      assertNull(date0);
      
      // Undeclared exception!
      try { 
        jwtTokenUtil0.isTokenExpired("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.utils.JwtTokenUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      assertNotNull(jwtTokenUtil0);
      
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(jwtConfig0).getSecret();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      Date date0 = jwtTokenUtil0.getExpirationDateFromToken("g#TNUZBQNveL#");
      assertNull(date0);
      
      List<String> list0 = jwtTokenUtil0.getRolesFromToken(" \u21E2 ");
      assertNull(list0);
      
      // Undeclared exception!
      try { 
        jwtTokenUtil0.isTokenExpired("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.utils.JwtTokenUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      assertNotNull(jwtTokenUtil0);
      
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jwtConfig0).getSecret();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      LinkedList<SimpleGrantedAuthority> linkedList0 = new LinkedList<SimpleGrantedAuthority>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      SimpleGrantedAuthority simpleGrantedAuthority0 = new SimpleGrantedAuthority("TOKEN_");
      assertNotNull(simpleGrantedAuthority0);
      assertEquals("TOKEN_", simpleGrantedAuthority0.toString());
      assertEquals("TOKEN_", simpleGrantedAuthority0.getAuthority());
      
      boolean boolean0 = linkedList0.add(simpleGrantedAuthority0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("TOKEN_", simpleGrantedAuthority0.toString());
      assertEquals("TOKEN_", simpleGrantedAuthority0.getAuthority());
      assertTrue(linkedList0.contains(simpleGrantedAuthority0));
      
      User user0 = new User("TOKEN_", "TOKEN_", true, true, false, false, linkedList0);
      assertNotNull(user0);
      assertEquals(1, linkedList0.size());
      assertEquals("TOKEN_", user0.getUsername());
      assertTrue(user0.isEnabled());
      assertEquals("TOKEN_", user0.getPassword());
      assertTrue(user0.isAccountNonExpired());
      assertFalse(user0.isCredentialsNonExpired());
      assertFalse(user0.isAccountNonLocked());
      assertTrue(linkedList0.contains(simpleGrantedAuthority0));
      
      // Undeclared exception!
      try { 
        jwtTokenUtil0.validateToken("TOKEN_", user0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      assertNotNull(jwtTokenUtil0);
      
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jwtConfig0).getHeader();
      doReturn((String) null).when(jwtConfig0).getPrefix();
      doReturn((String) null).when(jwtConfig0).getSecret();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      Date date0 = jwtTokenUtil0.getExpirationDateFromToken("TOKEN_");
      assertNull(date0);
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((ServletContext) null).when(httpServletRequest0).getServletContext();
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      ServletContext servletContext0 = httpServletRequestWrapper0.getServletContext();
      assertNull(servletContext0);
      
      // Undeclared exception!
      try { 
        jwtTokenUtil0.getUsernameFromRequest(httpServletRequestWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.utils.JwtTokenUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      assertNotNull(jwtTokenUtil0);
      
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jwtConfig0).getSecret();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      // Undeclared exception!
      try { 
        jwtTokenUtil0.canTokenBeRefreshed("TOKEN_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.utils.JwtTokenUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      assertNotNull(jwtTokenUtil0);
      
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jwtConfig0).getSecret();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      List<String> list0 = jwtTokenUtil0.getRolesFromToken("TOKEN_");
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      assertNotNull(jwtTokenUtil0);
      
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jwtConfig0).getSecret();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      UserDetails userDetails0 = mock(UserDetails.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(userDetails0).getUsername();
      // Undeclared exception!
      try { 
        jwtTokenUtil0.validateToken("TOKEN_", userDetails0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      assertNotNull(jwtTokenUtil0);
      
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jwtConfig0).getSecret();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      String string0 = jwtTokenUtil0.refreshToken("TOKEN_");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      assertNotNull(jwtTokenUtil0);
      
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(jwtConfig0).getSecret();
      doReturn(0L).when(jwtConfig0).getTime();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      Date date0 = jwtTokenUtil0.getExpirationDateFromToken("");
      assertNull(date0);
      
      LinkedList<SimpleGrantedAuthority> linkedList0 = new LinkedList<SimpleGrantedAuthority>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      SimpleGrantedAuthority simpleGrantedAuthority0 = new SimpleGrantedAuthority("TOKEN_");
      assertNotNull(simpleGrantedAuthority0);
      assertEquals("TOKEN_", simpleGrantedAuthority0.toString());
      assertEquals("TOKEN_", simpleGrantedAuthority0.getAuthority());
      
      boolean boolean0 = linkedList0.add(simpleGrantedAuthority0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("TOKEN_", simpleGrantedAuthority0.toString());
      assertEquals("TOKEN_", simpleGrantedAuthority0.getAuthority());
      assertTrue(linkedList0.contains(simpleGrantedAuthority0));
      
      User user0 = new User("TOKEN_", "", linkedList0);
      assertNotNull(user0);
      assertEquals(1, linkedList0.size());
      assertTrue(user0.isAccountNonLocked());
      assertEquals("TOKEN_", user0.getUsername());
      assertEquals("", user0.getPassword());
      assertTrue(user0.isCredentialsNonExpired());
      assertTrue(user0.isAccountNonExpired());
      assertTrue(user0.isEnabled());
      assertTrue(linkedList0.contains(simpleGrantedAuthority0));
      
      // Undeclared exception!
      try { 
        jwtTokenUtil0.generateToken(user0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64-encoded secret key cannot be null or empty.
         //
         verifyException("io.jsonwebtoken.lang.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      assertNotNull(jwtTokenUtil0);
      
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jwtConfig0).getSecret();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      Date date0 = jwtTokenUtil0.getExpirationDateFromToken("TOKEN_");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      assertNotNull(jwtTokenUtil0);
      
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jwtConfig0).getSecret();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      Date date0 = jwtTokenUtil0.getCreatedDateFromToken("java.lang.reflect");
      assertNull(date0);
      
      // Undeclared exception!
      try { 
        jwtTokenUtil0.generateToken((UserDetails) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.utils.JwtTokenUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      assertNotNull(jwtTokenUtil0);
      
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn("#Fx&o)/9qOUx2m\"J-`").when(jwtConfig0).getHeader();
      doReturn("#Fx&o)/9qOUx2m\"J-`").when(jwtConfig0).getPrefix();
      doReturn("#Fx&o)/9qOUx2m\"J-`", "#Fx&o)/9qOUx2m\"J-`", "#Fx&o)/9qOUx2m\"J-`").when(jwtConfig0).getSecret();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      Date date0 = jwtTokenUtil0.getCreatedDateFromToken("TOKEN_");
      assertNull(date0);
      
      String string0 = jwtTokenUtil0.getUsernameFromToken("io.lettuce.core.dynamic.ReactiveTypeAdapters$RxJava1ObservableToFluxAdapter");
      assertNull(string0);
      
      Date date1 = jwtTokenUtil0.getExpirationDateFromToken("TOKEN_");
      assertNull(date1);
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(locale0).when(httpServletRequest0).getLocale();
      doReturn("").when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      Locale locale1 = httpServletRequestWrapper0.getLocale();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      
      // Undeclared exception!
      try { 
        jwtTokenUtil0.getUsernameFromRequest(httpServletRequestWrapper0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      assertNotNull(jwtTokenUtil0);
      
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn("\u0000~bI=U VmxD>U(i").when(jwtConfig0).getHeader();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      assertNotNull(httpServletRequestWrapper0);
      
      HttpServletRequestWrapper httpServletRequestWrapper1 = new HttpServletRequestWrapper(httpServletRequestWrapper0);
      assertNotNull(httpServletRequestWrapper1);
      assertFalse(httpServletRequestWrapper1.equals((Object)httpServletRequestWrapper0));
      
      httpServletRequestWrapper0.setRequest(httpServletRequestWrapper1);
      assertNotSame(httpServletRequestWrapper0, httpServletRequestWrapper1);
      assertNotSame(httpServletRequestWrapper1, httpServletRequestWrapper0);
      assertFalse(httpServletRequestWrapper0.equals((Object)httpServletRequestWrapper1));
      assertFalse(httpServletRequestWrapper1.equals((Object)httpServletRequestWrapper0));
      
      // Undeclared exception!
      try { 
        jwtTokenUtil0.getUsernameFromRequest(httpServletRequestWrapper0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      assertNotNull(jwtTokenUtil0);
      
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jwtConfig0).getSecret();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      Date date0 = jwtTokenUtil0.getCreatedDateFromToken("TOKEN_");
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      assertNotNull(jwtTokenUtil0);
      
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn("roles").when(jwtConfig0).getSecret();
      doReturn(969L).when(jwtConfig0).getTime();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      LinkedList<SimpleGrantedAuthority> linkedList0 = new LinkedList<SimpleGrantedAuthority>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      User user0 = new User("TOKEN_", "TOKEN_", true, true, true, true, linkedList0);
      assertNotNull(user0);
      assertEquals(0, linkedList0.size());
      assertEquals("TOKEN_", user0.getPassword());
      assertTrue(user0.isEnabled());
      assertTrue(user0.isCredentialsNonExpired());
      assertTrue(user0.isAccountNonExpired());
      assertTrue(user0.isAccountNonLocked());
      assertEquals("TOKEN_", user0.getUsername());
      
      String string0 = jwtTokenUtil0.generateToken(user0);
      assertNotNull(string0);
      assertEquals("eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUT0tFTl8iLCJjcmVhdGVkIjoxMzkyNDA5MjgxMzIwLCJyb2xlcyI6W10sImV4cCI6MTM5MjQxMDI1MH0.mA7OrjqCGPS8MTaU9QqM1Bozd9IcLtM4YqiMTIHNHcHr_G29eoBSSnPqnWZOrIss6QSNzXIeYfYoZO7cP6lRig", string0);
      assertEquals(0, linkedList0.size());
      assertEquals("TOKEN_", user0.getPassword());
      assertTrue(user0.isEnabled());
      assertTrue(user0.isCredentialsNonExpired());
      assertTrue(user0.isAccountNonExpired());
      assertTrue(user0.isAccountNonLocked());
      assertEquals("TOKEN_", user0.getUsername());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      assertNotNull(jwtTokenUtil0);
      
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      UserDetails userDetails0 = mock(UserDetails.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(userDetails0).getAuthorities();
      doReturn((String) null).when(userDetails0).getUsername();
      // Undeclared exception!
      try { 
        jwtTokenUtil0.generateToken(userDetails0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.utils.JwtTokenUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      assertNotNull(jwtTokenUtil0);
      
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn("com.fasterxml.jackson.databind.type.TypeBindings$TypeParamStash").when(jwtConfig0).getSecret();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      String string0 = jwtTokenUtil0.getUsernameFromToken("TOKEN_");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      assertNotNull(jwtTokenUtil0);
      
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn("").when(jwtConfig0).getHeader();
      doReturn("").when(jwtConfig0).getPrefix();
      doReturn((String) null).when(jwtConfig0).getSecret();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("sub").when(httpServletRequest0).getHeader(anyString());
      String string0 = jwtTokenUtil0.getUsernameFromRequest(httpServletRequest0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      assertNotNull(jwtTokenUtil0);
      
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jwtConfig0).getHeader();
      doReturn((String) null).when(jwtConfig0).getPrefix();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      // Undeclared exception!
      try { 
        jwtTokenUtil0.getUsernameFromRequest(httpServletRequest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.utils.JwtTokenUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      assertNotNull(jwtTokenUtil0);
      
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn("cDVaJ0m|_", "cDVaJ0m|_", "cDVaJ0m|_", "cDVaJ0m|_", "cDVaJ0m|_").when(jwtConfig0).getSecret();
      doReturn(31L).when(jwtConfig0).getTime();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      LinkedList<SimpleGrantedAuthority> linkedList0 = new LinkedList<SimpleGrantedAuthority>();
      SimpleGrantedAuthority simpleGrantedAuthority0 = new SimpleGrantedAuthority("TOKEN_");
      linkedList0.add(simpleGrantedAuthority0);
      User user0 = new User("TOKEN_", "cDVaJ0m|_", true, true, true, true, linkedList0);
      jwtTokenUtil0.generateToken(user0);
      jwtTokenUtil0.canTokenBeRefreshed("eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUT0tFTl8iLCJjcmVhdGVkIjoxMzkyNDA5MjgxMzIwLCJyb2xlcyI6WyJUT0tFTl8iXSwiZXhwIjoxMzkyNDA5MzEyfQ.UEtuReZ_aotS850k6p8nq6DTzXzzqQ9tnLXhFRrw-6jAJGCQ8KaNL88GaFAPc-Ccr5JZObEf4QhKRf5Qi193uw");
      jwtTokenUtil0.getRolesFromToken("cDVaJ0m|_");
      jwtTokenUtil0.getExpirationDateFromToken("j;M9.");
      jwtTokenUtil0.getCreatedDateFromToken("j;M9.");
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      jwtTokenUtil0.getCreatedDateFromToken("roles");
      jwtTokenUtil0.getUsernameFromToken("eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUT0tFTl8iLCJjcmVhdGVkIjoxMzkyNDA5MjgxMzIwLCJyb2xlcyI6WyJUT0tFTl8iXSwiZXhwIjoxMzkyNDA5MzEyfQ.UEtuReZ_aotS850k6p8nq6DTzXzzqQ9tnLXhFRrw-6jAJGCQ8KaNL88GaFAPc-Ccr5JZObEf4QhKRf5Qi193uw");
      // Undeclared exception!
      try { 
        jwtTokenUtil0.canTokenBeRefreshed("JKP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.utils.JwtTokenUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn("cDVaFJ0m|_", "cDVaFJ0m|_", "cDVaFJ0m|_", "cDVaFJ0m|_", "cDVaFJ0m|_").when(jwtConfig0).getSecret();
      doReturn(31L).when(jwtConfig0).getTime();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      LinkedList<SimpleGrantedAuthority> linkedList0 = new LinkedList<SimpleGrantedAuthority>();
      User user0 = new User("TOKEN_", "cDVaFJ0m|_", false, false, false, false, linkedList0);
      jwtTokenUtil0.generateToken(user0);
      jwtTokenUtil0.canTokenBeRefreshed("eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJUT0tFTl8iLCJjcmVhdGVkIjoxMzkyNDA5MjgxMzIwLCJyb2xlcyI6W10sImV4cCI6MTM5MjQwOTMxMn0.ykrKMj44e7IjT-lJs099q2AA1HC9fm8EKBEf7IOf3apS17WGpd3SIhWj0ZADamWIdpQYaDmvGR4Df1uE2G6ecQ");
      jwtTokenUtil0.getRolesFromToken("com.fasterxml.jackson.databind.node.IntNode");
      String string0 = "j;M9.";
      jwtTokenUtil0.getExpirationDateFromToken("j;M9.");
      String string1 = "";
      // Undeclared exception!
      try { 
        jwtTokenUtil0.canTokenBeRefreshed("cDVaFJ0m|_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.utils.JwtTokenUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn("PAB3s", "PAB3s").when(jwtConfig0).getSecret();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      jwtTokenUtil0.getCreatedDateFromToken("PAB3s");
      LinkedList<SimpleGrantedAuthority> linkedList0 = new LinkedList<SimpleGrantedAuthority>();
      User user0 = new User("PAB3s", "TOKEN_", linkedList0);
      // Undeclared exception!
      try { 
        jwtTokenUtil0.validateToken("PAB3s", user0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JwtTokenUtil jwtTokenUtil0 = new JwtTokenUtil();
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn("\u0000~bI=U VmxD>U(i", "\u0000~bI=U VmxD>U(i").when(jwtConfig0).getHeader();
      doReturn("\u0000~bI=U VmxD>U(i", "\u0000~bI=U VmxD>U(i").when(jwtConfig0).getPrefix();
      doReturn("\u0000~bI=U VmxD>U(i", "\u0000~bI=U VmxD>U(i", "\u0000~bI=U VmxD>U(i").when(jwtConfig0).getSecret();
      Injector.inject(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class, "jwtConfig", (Object) jwtConfig0);
      Injector.validateBean(jwtTokenUtil0, (Class<?>) JwtTokenUtil.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("\u0000~bI=U VmxD>U(i", "\u0000~bI=U VmxD>U(i").when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      jwtTokenUtil0.getUsernameFromRequest(httpServletRequestWrapper0);
      jwtTokenUtil0.getUsernameFromRequest(httpServletRequestWrapper0);
      String string0 = jwtTokenUtil0.refreshToken("TOKEN_");
      assertNull(string0);
  }
}

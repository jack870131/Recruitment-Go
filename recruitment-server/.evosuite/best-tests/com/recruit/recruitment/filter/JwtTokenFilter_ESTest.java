/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 10 11:10:52 GMT 2020
 */

package com.recruit.recruitment.filter;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.recruit.recruitment.config.JwtConfig;
import com.recruit.recruitment.filter.JwtTokenFilter;
import com.recruit.recruitment.service.UserService;
import com.recruit.recruitment.utils.RequestUtil;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;
import javax.servlet.http.HttpServletResponse;
import org.apache.catalina.connector.Response;
import org.apache.catalina.filters.AddDefaultCharsetFilter;
import org.apache.catalina.filters.ExpiresFilter;
import org.apache.catalina.manager.StatusManagerServlet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.ValueOperations;
import org.springframework.mock.web.MockFilterChain;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.firewall.StrictHttpFirewall;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JwtTokenFilter_ESTest extends JwtTokenFilter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JwtTokenFilter jwtTokenFilter0 = new JwtTokenFilter();
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jwtConfig0).getHeader();
      Injector.inject(jwtTokenFilter0, (Class<?>) JwtTokenFilter.class, "jwtConfig", (Object) jwtConfig0);
      ValueOperations<Integer, Object> valueOperations0 = (ValueOperations<Integer, Object>) mock(ValueOperations.class, new ViolatedAssumptionAnswer());
      RedisTemplate<Integer, Object> redisTemplate0 = (RedisTemplate<Integer, Object>) mock(RedisTemplate.class, new ViolatedAssumptionAnswer());
      doReturn((Boolean) null).when(redisTemplate0).hasKey(anyInt());
      doReturn(valueOperations0).when(redisTemplate0).opsForValue();
      Injector.inject(jwtTokenFilter0, (Class<?>) JwtTokenFilter.class, "redisTemplate", (Object) redisTemplate0);
      RequestUtil requestUtil0 = mock(RequestUtil.class, new ViolatedAssumptionAnswer());
      doReturn("FIELD_FLAG_UNIQUE_KEY").when(requestUtil0).getIpAddress(any(javax.servlet.http.HttpServletRequest.class));
      Injector.inject(jwtTokenFilter0, (Class<?>) JwtTokenFilter.class, "requestUtil", (Object) requestUtil0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(jwtTokenFilter0, (Class<?>) JwtTokenFilter.class, "userService", (Object) userService0);
      Injector.validateBean(jwtTokenFilter0, (Class<?>) JwtTokenFilter.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      FilterChain filterChain0 = mock(FilterChain.class, new ViolatedAssumptionAnswer());
      jwtTokenFilter0.doFilterInternal(httpServletRequest0, httpServletResponse0, filterChain0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JwtTokenFilter jwtTokenFilter0 = new JwtTokenFilter();
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jwtConfig0).getHeader();
      Injector.inject(jwtTokenFilter0, (Class<?>) JwtTokenFilter.class, "jwtConfig", (Object) jwtConfig0);
      ValueOperations<Integer, Integer> valueOperations0 = (ValueOperations<Integer, Integer>) mock(ValueOperations.class, new ViolatedAssumptionAnswer());
      RedisTemplate<Integer, Integer> redisTemplate0 = (RedisTemplate<Integer, Integer>) mock(RedisTemplate.class, new ViolatedAssumptionAnswer());
      doReturn((Boolean) null).when(redisTemplate0).hasKey(anyInt());
      doReturn(valueOperations0).when(redisTemplate0).opsForValue();
      Injector.inject(jwtTokenFilter0, (Class<?>) JwtTokenFilter.class, "redisTemplate", (Object) redisTemplate0);
      RequestUtil requestUtil0 = mock(RequestUtil.class, new ViolatedAssumptionAnswer());
      doReturn(".FILTERED").when(requestUtil0).getIpAddress(any(javax.servlet.http.HttpServletRequest.class));
      Injector.inject(jwtTokenFilter0, (Class<?>) JwtTokenFilter.class, "requestUtil", (Object) requestUtil0);
      UserDetails userDetails0 = mock(UserDetails.class, new ViolatedAssumptionAnswer());
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(jwtTokenFilter0, (Class<?>) JwtTokenFilter.class, "userService", (Object) userService0);
      Injector.validateBean(jwtTokenFilter0, (Class<?>) JwtTokenFilter.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      ExpiresFilter expiresFilter0 = new ExpiresFilter();
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      ExpiresFilter.XHttpServletResponse expiresFilter_XHttpServletResponse0 = expiresFilter0.new XHttpServletResponse(httpServletRequestWrapper0, httpServletResponse0);
      // Undeclared exception!
      try { 
        jwtTokenFilter0.doFilterInternal(httpServletRequestWrapper0, expiresFilter_XHttpServletResponse0, (FilterChain) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.filter.JwtTokenFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JwtTokenFilter jwtTokenFilter0 = new JwtTokenFilter();
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn("Y>@_t50Y39^WX#{/").when(jwtConfig0).getHeader();
      doReturn("Y>@_t50Y39^WX#{/").when(jwtConfig0).getPrefix();
      Injector.inject(jwtTokenFilter0, (Class<?>) JwtTokenFilter.class, "jwtConfig", (Object) jwtConfig0);
      ValueOperations<Integer, Integer> valueOperations0 = (ValueOperations<Integer, Integer>) mock(ValueOperations.class, new ViolatedAssumptionAnswer());
      RedisTemplate<Integer, Integer> redisTemplate0 = (RedisTemplate<Integer, Integer>) mock(RedisTemplate.class, new ViolatedAssumptionAnswer());
      doReturn((Boolean) null).when(redisTemplate0).hasKey(anyInt());
      doReturn(valueOperations0).when(redisTemplate0).opsForValue();
      Injector.inject(jwtTokenFilter0, (Class<?>) JwtTokenFilter.class, "redisTemplate", (Object) redisTemplate0);
      RequestUtil requestUtil0 = mock(RequestUtil.class, new ViolatedAssumptionAnswer());
      doReturn(".FILTERED").when(requestUtil0).getIpAddress(any(javax.servlet.http.HttpServletRequest.class));
      Injector.inject(jwtTokenFilter0, (Class<?>) JwtTokenFilter.class, "requestUtil", (Object) requestUtil0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(jwtTokenFilter0, (Class<?>) JwtTokenFilter.class, "userService", (Object) userService0);
      Injector.validateBean(jwtTokenFilter0, (Class<?>) JwtTokenFilter.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(".FILTERED").when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      ExpiresFilter expiresFilter0 = new ExpiresFilter();
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      ExpiresFilter.XHttpServletResponse expiresFilter_XHttpServletResponse0 = expiresFilter0.new XHttpServletResponse(httpServletRequestWrapper0, httpServletResponse0);
      // Undeclared exception!
      try { 
        jwtTokenFilter0.doFilterInternal(httpServletRequestWrapper0, expiresFilter_XHttpServletResponse0, (FilterChain) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.filter.JwtTokenFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JwtTokenFilter jwtTokenFilter0 = new JwtTokenFilter();
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jwtConfig0).getHeader();
      Injector.inject(jwtTokenFilter0, (Class<?>) JwtTokenFilter.class, "jwtConfig", (Object) jwtConfig0);
      ValueOperations<Integer, Object> valueOperations0 = (ValueOperations<Integer, Object>) mock(ValueOperations.class, new ViolatedAssumptionAnswer());
      RedisTemplate<Integer, Object> redisTemplate0 = (RedisTemplate<Integer, Object>) mock(RedisTemplate.class, new ViolatedAssumptionAnswer());
      doReturn((Boolean) null, (Boolean) null).when(redisTemplate0).hasKey(anyInt());
      doReturn(valueOperations0, (ValueOperations) null).when(redisTemplate0).opsForValue();
      Injector.inject(jwtTokenFilter0, (Class<?>) JwtTokenFilter.class, "redisTemplate", (Object) redisTemplate0);
      RequestUtil requestUtil0 = mock(RequestUtil.class, new ViolatedAssumptionAnswer());
      doReturn("TOKEN_", (String) null).when(requestUtil0).getIpAddress(any(javax.servlet.http.HttpServletRequest.class));
      Injector.inject(jwtTokenFilter0, (Class<?>) JwtTokenFilter.class, "requestUtil", (Object) requestUtil0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(jwtTokenFilter0, (Class<?>) JwtTokenFilter.class, "userService", (Object) userService0);
      Injector.validateBean(jwtTokenFilter0, (Class<?>) JwtTokenFilter.class);
      StrictHttpFirewall strictHttpFirewall0 = new StrictHttpFirewall();
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(httpServletRequest0).getAttribute(anyString());
      doReturn((String) null).when(httpServletRequest0).getHeader(anyString());
      ExpiresFilter expiresFilter0 = new ExpiresFilter();
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      HttpServletResponse httpServletResponse1 = strictHttpFirewall0.getFirewalledResponse(httpServletResponse0);
      ExpiresFilter.XHttpServletResponse expiresFilter_XHttpServletResponse0 = expiresFilter0.new XHttpServletResponse((HttpServletRequest) null, httpServletResponse1);
      StatusManagerServlet statusManagerServlet0 = new StatusManagerServlet();
      Filter[] filterArray0 = new Filter[4];
      filterArray0[0] = (Filter) jwtTokenFilter0;
      AddDefaultCharsetFilter addDefaultCharsetFilter0 = new AddDefaultCharsetFilter();
      filterArray0[1] = (Filter) addDefaultCharsetFilter0;
      filterArray0[2] = (Filter) expiresFilter0;
      filterArray0[3] = (Filter) jwtTokenFilter0;
      MockFilterChain mockFilterChain0 = new MockFilterChain(statusManagerServlet0, filterArray0);
      // Undeclared exception!
      try { 
        jwtTokenFilter0.doFilterInternal(httpServletRequest0, expiresFilter_XHttpServletResponse0, mockFilterChain0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.filter.JwtTokenFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JwtTokenFilter jwtTokenFilter0 = new JwtTokenFilter();
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      Injector.inject(jwtTokenFilter0, (Class<?>) JwtTokenFilter.class, "jwtConfig", (Object) jwtConfig0);
      Boolean boolean0 = Boolean.TRUE;
      RedisTemplate<Object, String> redisTemplate0 = (RedisTemplate<Object, String>) mock(RedisTemplate.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(redisTemplate0).hasKey(any());
      doReturn((ValueOperations<Object, String>) null).when(redisTemplate0).opsForValue();
      Injector.inject(jwtTokenFilter0, (Class<?>) JwtTokenFilter.class, "redisTemplate", (Object) redisTemplate0);
      RequestUtil requestUtil0 = mock(RequestUtil.class, new ViolatedAssumptionAnswer());
      doReturn("UGm").when(requestUtil0).getIpAddress(any(javax.servlet.http.HttpServletRequest.class));
      Injector.inject(jwtTokenFilter0, (Class<?>) JwtTokenFilter.class, "requestUtil", (Object) requestUtil0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      Injector.inject(jwtTokenFilter0, (Class<?>) JwtTokenFilter.class, "userService", (Object) userService0);
      Injector.validateBean(jwtTokenFilter0, (Class<?>) JwtTokenFilter.class);
      HttpServletResponse httpServletResponse0 = mock(HttpServletResponse.class, new ViolatedAssumptionAnswer());
      FilterChain filterChain0 = mock(FilterChain.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jwtTokenFilter0.doFilterInternal((HttpServletRequest) null, httpServletResponse0, filterChain0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.filter.JwtTokenFilter", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      JwtTokenFilter jwtTokenFilter0 = new JwtTokenFilter();
      JwtConfig jwtConfig0 = mock(JwtConfig.class, new ViolatedAssumptionAnswer());
      doReturn("NORMAL").when(jwtConfig0).getHeader();
      doReturn("").when(jwtConfig0).getPrefix();
      Injector.inject(jwtTokenFilter0, (Class<?>) JwtTokenFilter.class, "jwtConfig", (Object) jwtConfig0);
      ValueOperations<Integer, Integer> valueOperations0 = (ValueOperations<Integer, Integer>) mock(ValueOperations.class, new ViolatedAssumptionAnswer());
      RedisTemplate<Integer, Integer> redisTemplate0 = (RedisTemplate<Integer, Integer>) mock(RedisTemplate.class, new ViolatedAssumptionAnswer());
      doReturn((Boolean) null).when(redisTemplate0).hasKey(anyInt());
      doReturn(valueOperations0).when(redisTemplate0).opsForValue();
      Injector.inject(jwtTokenFilter0, (Class<?>) JwtTokenFilter.class, "redisTemplate", (Object) redisTemplate0);
      RequestUtil requestUtil0 = mock(RequestUtil.class, new ViolatedAssumptionAnswer());
      doReturn(".FILTERED").when(requestUtil0).getIpAddress(any(javax.servlet.http.HttpServletRequest.class));
      Injector.inject(jwtTokenFilter0, (Class<?>) JwtTokenFilter.class, "requestUtil", (Object) requestUtil0);
      UserService userService0 = mock(UserService.class, new ViolatedAssumptionAnswer());
      doReturn((UserDetails) null).when(userService0).loadUserByToken(anyString());
      Injector.inject(jwtTokenFilter0, (Class<?>) JwtTokenFilter.class, "userService", (Object) userService0);
      Injector.validateBean(jwtTokenFilter0, (Class<?>) JwtTokenFilter.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("1").when(httpServletRequest0).getHeader(anyString());
      HttpServletRequestWrapper httpServletRequestWrapper0 = new HttpServletRequestWrapper(httpServletRequest0);
      Response response0 = new Response();
      // Undeclared exception!
      try { 
        jwtTokenFilter0.doFilterInternal(httpServletRequestWrapper0, response0, (FilterChain) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.filter.JwtTokenFilter", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 10 11:04:33 GMT 2020
 */

package com.recruit.recruitment.mapper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.recruit.recruitment.mapper.JobSqlProvider;
import com.recruit.recruitment.model.pojo.Job;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JobSqlProvider_ESTest extends JobSqlProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JobSqlProvider jobSqlProvider0 = new JobSqlProvider();
      // Undeclared exception!
      try { 
        jobSqlProvider0.updateByPrimaryKeySelective((Job) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.mapper.JobSqlProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JobSqlProvider jobSqlProvider0 = new JobSqlProvider();
      // Undeclared exception!
      try { 
        jobSqlProvider0.insertSelective((Job) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.mapper.JobSqlProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JobSqlProvider jobSqlProvider0 = new JobSqlProvider();
      Job job0 = new Job();
      job0.setJobdescript("T");
      String string0 = jobSqlProvider0.updateByPrimaryKeySelective(job0);
      assertEquals("UPDATE job\nSET jobdescript = #{jobdescript,jdbcType=VARCHAR}\nWHERE (jobid = #{jobid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JobSqlProvider jobSqlProvider0 = new JobSqlProvider();
      Job job0 = new Job();
      MockDate mockDate0 = new MockDate();
      job0.setJobend(mockDate0);
      String string0 = jobSqlProvider0.updateByPrimaryKeySelective(job0);
      assertEquals("UPDATE job\nSET jobend = #{jobend,jdbcType=DATE}\nWHERE (jobid = #{jobid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JobSqlProvider jobSqlProvider0 = new JobSqlProvider();
      Job job0 = new Job();
      MockDate mockDate0 = new MockDate();
      job0.setJobstart(mockDate0);
      String string0 = jobSqlProvider0.updateByPrimaryKeySelective(job0);
      assertEquals("UPDATE job\nSET jobstart = #{jobstart,jdbcType=DATE}\nWHERE (jobid = #{jobid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JobSqlProvider jobSqlProvider0 = new JobSqlProvider();
      Job job0 = new Job();
      job0.setJobtitle("T");
      String string0 = jobSqlProvider0.updateByPrimaryKeySelective(job0);
      assertEquals("UPDATE job\nSET jobtitle = #{jobtitle,jdbcType=VARCHAR}\nWHERE (jobid = #{jobid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JobSqlProvider jobSqlProvider0 = new JobSqlProvider();
      Job job0 = new Job();
      job0.setCompanyname("T");
      String string0 = jobSqlProvider0.updateByPrimaryKeySelective(job0);
      assertEquals("UPDATE job\nSET companyname = #{companyname,jdbcType=VARCHAR}\nWHERE (jobid = #{jobid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JobSqlProvider jobSqlProvider0 = new JobSqlProvider();
      Job job0 = new Job();
      Integer integer0 = new Integer((-5217));
      job0.setUserid(integer0);
      String string0 = jobSqlProvider0.updateByPrimaryKeySelective(job0);
      assertEquals("UPDATE job\nSET userid = #{userid,jdbcType=INTEGER}\nWHERE (jobid = #{jobid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JobSqlProvider jobSqlProvider0 = new JobSqlProvider();
      Job job0 = new Job();
      job0.setJobdescript("T");
      String string0 = jobSqlProvider0.insertSelective(job0);
      assertEquals("INSERT INTO job\n (jobdescript)\nVALUES (#{jobdescript,jdbcType=VARCHAR})", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JobSqlProvider jobSqlProvider0 = new JobSqlProvider();
      Job job0 = new Job();
      MockDate mockDate0 = new MockDate();
      job0.setJobend(mockDate0);
      String string0 = jobSqlProvider0.insertSelective(job0);
      assertEquals("INSERT INTO job\n (jobend)\nVALUES (#{jobend,jdbcType=DATE})", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JobSqlProvider jobSqlProvider0 = new JobSqlProvider();
      Job job0 = new Job();
      MockDate mockDate0 = new MockDate();
      job0.setJobstart(mockDate0);
      String string0 = jobSqlProvider0.insertSelective(job0);
      assertEquals("INSERT INTO job\n (jobstart)\nVALUES (#{jobstart,jdbcType=DATE})", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JobSqlProvider jobSqlProvider0 = new JobSqlProvider();
      Job job0 = new Job();
      job0.setJobtitle("T");
      String string0 = jobSqlProvider0.insertSelective(job0);
      assertEquals("INSERT INTO job\n (jobtitle)\nVALUES (#{jobtitle,jdbcType=VARCHAR})", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JobSqlProvider jobSqlProvider0 = new JobSqlProvider();
      Job job0 = new Job();
      job0.setCompanyname("T");
      String string0 = jobSqlProvider0.insertSelective(job0);
      assertEquals("INSERT INTO job\n (companyname)\nVALUES (#{companyname,jdbcType=VARCHAR})", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JobSqlProvider jobSqlProvider0 = new JobSqlProvider();
      Job job0 = new Job();
      Integer integer0 = new Integer((-5217));
      job0.setUserid(integer0);
      String string0 = jobSqlProvider0.insertSelective(job0);
      assertEquals("INSERT INTO job\n (userid)\nVALUES (#{userid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JobSqlProvider jobSqlProvider0 = new JobSqlProvider();
      Job job0 = new Job();
      Integer integer0 = new Integer((-5217));
      job0.setJobid(integer0);
      String string0 = jobSqlProvider0.insertSelective(job0);
      assertEquals("INSERT INTO job\n (jobid)\nVALUES (#{jobid,jdbcType=INTEGER})", string0);
  }
}

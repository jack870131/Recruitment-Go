/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 10 11:13:06 GMT 2020
 */

package com.recruit.recruitment.mapper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.recruit.recruitment.mapper.ApplicationSqlProvider;
import com.recruit.recruitment.model.pojo.Application;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ApplicationSqlProvider_ESTest extends ApplicationSqlProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ApplicationSqlProvider applicationSqlProvider0 = new ApplicationSqlProvider();
      // Undeclared exception!
      try { 
        applicationSqlProvider0.updateByPrimaryKeySelective((Application) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.mapper.ApplicationSqlProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ApplicationSqlProvider applicationSqlProvider0 = new ApplicationSqlProvider();
      // Undeclared exception!
      try { 
        applicationSqlProvider0.insertSelective((Application) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.mapper.ApplicationSqlProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ApplicationSqlProvider applicationSqlProvider0 = new ApplicationSqlProvider();
      Application application0 = new Application();
      BigDecimal bigDecimal0 = new BigDecimal((-14));
      application0.setScoreavg(bigDecimal0);
      String string0 = applicationSqlProvider0.updateByPrimaryKeySelective(application0);
      assertEquals("UPDATE application\nSET scoreavg = #{scoreavg,jdbcType=DECIMAL}\nWHERE (applicationid = #{applicationid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ApplicationSqlProvider applicationSqlProvider0 = new ApplicationSqlProvider();
      Application application0 = new Application();
      Integer integer0 = new Integer((-14));
      application0.setPostid(integer0);
      String string0 = applicationSqlProvider0.updateByPrimaryKeySelective(application0);
      assertEquals("UPDATE application\nSET postid = #{postid,jdbcType=INTEGER}\nWHERE (applicationid = #{applicationid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ApplicationSqlProvider applicationSqlProvider0 = new ApplicationSqlProvider();
      Application application0 = new Application();
      Integer integer0 = new Integer((-14));
      application0.setResumeid(integer0);
      String string0 = applicationSqlProvider0.updateByPrimaryKeySelective(application0);
      assertEquals("UPDATE application\nSET resumeid = #{resumeid,jdbcType=INTEGER}\nWHERE (applicationid = #{applicationid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ApplicationSqlProvider applicationSqlProvider0 = new ApplicationSqlProvider();
      Application application0 = new Application();
      BigDecimal bigDecimal0 = new BigDecimal((-14));
      application0.setScoreavg(bigDecimal0);
      String string0 = applicationSqlProvider0.insertSelective(application0);
      assertEquals("INSERT INTO application\n (scoreavg)\nVALUES (#{scoreavg,jdbcType=DECIMAL})", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ApplicationSqlProvider applicationSqlProvider0 = new ApplicationSqlProvider();
      Application application0 = new Application();
      Integer integer0 = new Integer((-14));
      application0.setPostid(integer0);
      String string0 = applicationSqlProvider0.insertSelective(application0);
      assertEquals("INSERT INTO application\n (postid)\nVALUES (#{postid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ApplicationSqlProvider applicationSqlProvider0 = new ApplicationSqlProvider();
      Application application0 = new Application();
      Integer integer0 = new Integer((-14));
      application0.setResumeid(integer0);
      String string0 = applicationSqlProvider0.insertSelective(application0);
      assertEquals("INSERT INTO application\n (resumeid)\nVALUES (#{resumeid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ApplicationSqlProvider applicationSqlProvider0 = new ApplicationSqlProvider();
      Application application0 = new Application();
      Integer integer0 = new Integer((-14));
      application0.setApplicationid(integer0);
      String string0 = applicationSqlProvider0.insertSelective(application0);
      assertEquals("INSERT INTO application\n (applicationid)\nVALUES (#{applicationid,jdbcType=INTEGER})", string0);
  }
}

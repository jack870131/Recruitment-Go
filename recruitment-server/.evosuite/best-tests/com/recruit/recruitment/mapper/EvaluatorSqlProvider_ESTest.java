/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 10 11:22:29 GMT 2020
 */

package com.recruit.recruitment.mapper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.recruit.recruitment.mapper.EvaluatorSqlProvider;
import com.recruit.recruitment.model.pojo.Evaluator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EvaluatorSqlProvider_ESTest extends EvaluatorSqlProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      EvaluatorSqlProvider evaluatorSqlProvider0 = new EvaluatorSqlProvider();
      // Undeclared exception!
      try { 
        evaluatorSqlProvider0.updateByPrimaryKeySelective((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.mapper.EvaluatorSqlProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      EvaluatorSqlProvider evaluatorSqlProvider0 = new EvaluatorSqlProvider();
      // Undeclared exception!
      try { 
        evaluatorSqlProvider0.insertSelective((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.mapper.EvaluatorSqlProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      EvaluatorSqlProvider evaluatorSqlProvider0 = new EvaluatorSqlProvider();
      Integer integer0 = new Integer(40);
      Evaluator evaluator0 = mock(Evaluator.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(evaluator0).getEvaluatorid();
      doReturn("UPDATE evaluator\nWHERE (evaluatorid = #{evaluatorid,jdbcType=INTEGER})").when(evaluator0).getEvaluatorname();
      doReturn(integer0).when(evaluator0).getPostid();
      String string0 = evaluatorSqlProvider0.insertSelective(evaluator0);
      assertEquals("INSERT INTO evaluator\n (evaluatorid, postid, evaluatorname)\nVALUES (#{evaluatorid,jdbcType=INTEGER}, #{postid,jdbcType=INTEGER}, #{evaluatorname,jdbcType=VARCHAR})", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      EvaluatorSqlProvider evaluatorSqlProvider0 = new EvaluatorSqlProvider();
      Integer integer0 = new Integer(40);
      Evaluator evaluator0 = mock(Evaluator.class, new ViolatedAssumptionAnswer());
      doReturn("UPDATE evaluator\nWHERE (evaluatorid = #{evaluatorid,jdbcType=INTEGER})").when(evaluator0).getEvaluatorname();
      doReturn(integer0).when(evaluator0).getPostid();
      String string0 = evaluatorSqlProvider0.updateByPrimaryKeySelective(evaluator0);
      assertEquals("UPDATE evaluator\nSET postid = #{postid,jdbcType=INTEGER}, evaluatorname = #{evaluatorname,jdbcType=VARCHAR}\nWHERE (evaluatorid = #{evaluatorid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      EvaluatorSqlProvider evaluatorSqlProvider0 = new EvaluatorSqlProvider();
      Evaluator evaluator0 = mock(Evaluator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(evaluator0).getEvaluatorname();
      doReturn((Integer) null).when(evaluator0).getPostid();
      String string0 = evaluatorSqlProvider0.updateByPrimaryKeySelective(evaluator0);
      assertEquals("UPDATE evaluator\nWHERE (evaluatorid = #{evaluatorid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      EvaluatorSqlProvider evaluatorSqlProvider0 = new EvaluatorSqlProvider();
      Evaluator evaluator0 = mock(Evaluator.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(evaluator0).getEvaluatorid();
      doReturn((String) null).when(evaluator0).getEvaluatorname();
      doReturn((Integer) null).when(evaluator0).getPostid();
      String string0 = evaluatorSqlProvider0.insertSelective(evaluator0);
      assertEquals("INSERT INTO evaluator", string0);
  }
}

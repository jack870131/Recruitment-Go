/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 10 11:09:13 GMT 2020
 */

package com.recruit.recruitment.mapper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.recruit.recruitment.mapper.DiscussionSqlProvider;
import com.recruit.recruitment.model.pojo.Discussion;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DiscussionSqlProvider_ESTest extends DiscussionSqlProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DiscussionSqlProvider discussionSqlProvider0 = new DiscussionSqlProvider();
      // Undeclared exception!
      try { 
        discussionSqlProvider0.updateByPrimaryKeySelective((Discussion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.mapper.DiscussionSqlProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DiscussionSqlProvider discussionSqlProvider0 = new DiscussionSqlProvider();
      // Undeclared exception!
      try { 
        discussionSqlProvider0.insertSelective((Discussion) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.mapper.DiscussionSqlProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DiscussionSqlProvider discussionSqlProvider0 = new DiscussionSqlProvider();
      Discussion discussion0 = new Discussion();
      discussion0.setContent("A");
      String string0 = discussionSqlProvider0.updateByPrimaryKeySelective(discussion0);
      assertEquals("UPDATE discussion\nSET content = #{content,jdbcType=VARCHAR}\nWHERE (discussionid = #{discussionid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DiscussionSqlProvider discussionSqlProvider0 = new DiscussionSqlProvider();
      Discussion discussion0 = new Discussion();
      discussion0.setTitle("A");
      String string0 = discussionSqlProvider0.updateByPrimaryKeySelective(discussion0);
      assertEquals("UPDATE discussion\nSET title = #{title,jdbcType=VARCHAR}\nWHERE (discussionid = #{discussionid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      Integer integer0 = new Integer((-16));
      discussion0.setReceiverid(integer0);
      DiscussionSqlProvider discussionSqlProvider0 = new DiscussionSqlProvider();
      String string0 = discussionSqlProvider0.updateByPrimaryKeySelective(discussion0);
      assertEquals("UPDATE discussion\nSET receiverid = #{receiverid,jdbcType=INTEGER}\nWHERE (discussionid = #{discussionid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      Integer integer0 = new Integer((-16));
      discussion0.setSenderid(integer0);
      DiscussionSqlProvider discussionSqlProvider0 = new DiscussionSqlProvider();
      String string0 = discussionSqlProvider0.updateByPrimaryKeySelective(discussion0);
      assertEquals("UPDATE discussion\nSET senderid = #{senderid,jdbcType=INTEGER}\nWHERE (discussionid = #{discussionid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      Integer integer0 = new Integer((-16));
      discussion0.setNotificationid(integer0);
      DiscussionSqlProvider discussionSqlProvider0 = new DiscussionSqlProvider();
      String string0 = discussionSqlProvider0.updateByPrimaryKeySelective(discussion0);
      assertEquals("UPDATE discussion\nSET notificationid = #{notificationid,jdbcType=INTEGER}\nWHERE (discussionid = #{discussionid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DiscussionSqlProvider discussionSqlProvider0 = new DiscussionSqlProvider();
      Discussion discussion0 = new Discussion();
      discussion0.setContent("A");
      String string0 = discussionSqlProvider0.insertSelective(discussion0);
      assertEquals("INSERT INTO discussion\n (content)\nVALUES (#{content,jdbcType=VARCHAR})", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DiscussionSqlProvider discussionSqlProvider0 = new DiscussionSqlProvider();
      Discussion discussion0 = new Discussion();
      discussion0.setTitle("A");
      String string0 = discussionSqlProvider0.insertSelective(discussion0);
      assertEquals("INSERT INTO discussion\n (title)\nVALUES (#{title,jdbcType=VARCHAR})", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      Integer integer0 = new Integer((-16));
      discussion0.setReceiverid(integer0);
      DiscussionSqlProvider discussionSqlProvider0 = new DiscussionSqlProvider();
      String string0 = discussionSqlProvider0.insertSelective(discussion0);
      assertEquals("INSERT INTO discussion\n (receiverid)\nVALUES (#{receiverid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      Integer integer0 = new Integer((-16));
      discussion0.setSenderid(integer0);
      DiscussionSqlProvider discussionSqlProvider0 = new DiscussionSqlProvider();
      String string0 = discussionSqlProvider0.insertSelective(discussion0);
      assertEquals("INSERT INTO discussion\n (senderid)\nVALUES (#{senderid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      Integer integer0 = new Integer((-16));
      discussion0.setNotificationid(integer0);
      DiscussionSqlProvider discussionSqlProvider0 = new DiscussionSqlProvider();
      String string0 = discussionSqlProvider0.insertSelective(discussion0);
      assertEquals("INSERT INTO discussion\n (notificationid)\nVALUES (#{notificationid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      Integer integer0 = new Integer((-16));
      discussion0.setDiscussionid(integer0);
      DiscussionSqlProvider discussionSqlProvider0 = new DiscussionSqlProvider();
      String string0 = discussionSqlProvider0.insertSelective(discussion0);
      assertEquals("INSERT INTO discussion\n (discussionid)\nVALUES (#{discussionid,jdbcType=INTEGER})", string0);
  }
}

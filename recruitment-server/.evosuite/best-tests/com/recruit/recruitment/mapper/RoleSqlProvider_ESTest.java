/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 10 11:25:55 GMT 2020
 */

package com.recruit.recruitment.mapper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.recruit.recruitment.mapper.RoleSqlProvider;
import com.recruit.recruitment.model.pojo.Role;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RoleSqlProvider_ESTest extends RoleSqlProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RoleSqlProvider roleSqlProvider0 = new RoleSqlProvider();
      // Undeclared exception!
      try { 
        roleSqlProvider0.updateByPrimaryKeySelective((Role) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.mapper.RoleSqlProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RoleSqlProvider roleSqlProvider0 = new RoleSqlProvider();
      // Undeclared exception!
      try { 
        roleSqlProvider0.insertSelective((Role) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.mapper.RoleSqlProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RoleSqlProvider roleSqlProvider0 = new RoleSqlProvider();
      Role role0 = mock(Role.class, new ViolatedAssumptionAnswer());
      doReturn("JOIN").when(role0).getRolename();
      String string0 = roleSqlProvider0.updateByPrimaryKeySelective(role0);
      assertEquals("UPDATE role\nSET rolename = #{rolename,jdbcType=VARCHAR}\nWHERE (roleid = #{roleid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RoleSqlProvider roleSqlProvider0 = new RoleSqlProvider();
      Role role0 = mock(Role.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(role0).getRolename();
      String string0 = roleSqlProvider0.updateByPrimaryKeySelective(role0);
      assertEquals("UPDATE role\nWHERE (roleid = #{roleid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RoleSqlProvider roleSqlProvider0 = new RoleSqlProvider();
      Role role0 = mock(Role.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(role0).getRoleid();
      doReturn("JOIN").when(role0).getRolename();
      String string0 = roleSqlProvider0.insertSelective(role0);
      assertEquals("INSERT INTO role\n (rolename)\nVALUES (#{rolename,jdbcType=VARCHAR})", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RoleSqlProvider roleSqlProvider0 = new RoleSqlProvider();
      Role role0 = mock(Role.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(role0).getRoleid();
      doReturn((String) null).when(role0).getRolename();
      String string0 = roleSqlProvider0.insertSelective(role0);
      assertEquals("INSERT INTO role", string0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 10 11:13:54 GMT 2020
 */

package com.recruit.recruitment.mapper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.recruit.recruitment.mapper.ScoreSqlProvider;
import com.recruit.recruitment.model.pojo.Score;
import java.math.BigDecimal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class ScoreSqlProvider_ESTest extends ScoreSqlProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ScoreSqlProvider scoreSqlProvider0 = new ScoreSqlProvider();
      // Undeclared exception!
      try { 
        scoreSqlProvider0.updateByPrimaryKeySelective((Score) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.mapper.ScoreSqlProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ScoreSqlProvider scoreSqlProvider0 = new ScoreSqlProvider();
      // Undeclared exception!
      try { 
        scoreSqlProvider0.insertSelective((Score) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.mapper.ScoreSqlProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ScoreSqlProvider scoreSqlProvider0 = new ScoreSqlProvider();
      Score score0 = new Score();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      score0.setScore(bigDecimal0);
      String string0 = scoreSqlProvider0.updateByPrimaryKeySelective(score0);
      assertEquals("UPDATE score\nSET score = #{score,jdbcType=DECIMAL}\nWHERE (scoreid = #{scoreid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ScoreSqlProvider scoreSqlProvider0 = new ScoreSqlProvider();
      Score score0 = new Score();
      Integer integer0 = new Integer(2554);
      score0.setApplicationid(integer0);
      String string0 = scoreSqlProvider0.updateByPrimaryKeySelective(score0);
      assertEquals("UPDATE score\nSET applicationid = #{applicationid,jdbcType=INTEGER}\nWHERE (scoreid = #{scoreid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ScoreSqlProvider scoreSqlProvider0 = new ScoreSqlProvider();
      Score score0 = new Score();
      Integer integer0 = new Integer(2554);
      score0.setMarkerid(integer0);
      String string0 = scoreSqlProvider0.updateByPrimaryKeySelective(score0);
      assertEquals("UPDATE score\nSET markerid = #{markerid,jdbcType=INTEGER}\nWHERE (scoreid = #{scoreid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ScoreSqlProvider scoreSqlProvider0 = new ScoreSqlProvider();
      Score score0 = new Score();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      score0.setScore(bigDecimal0);
      String string0 = scoreSqlProvider0.insertSelective(score0);
      assertEquals("INSERT INTO score\n (score)\nVALUES (#{score,jdbcType=DECIMAL})", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ScoreSqlProvider scoreSqlProvider0 = new ScoreSqlProvider();
      Score score0 = new Score();
      Integer integer0 = new Integer(2554);
      score0.setApplicationid(integer0);
      String string0 = scoreSqlProvider0.insertSelective(score0);
      assertEquals("INSERT INTO score\n (applicationid)\nVALUES (#{applicationid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ScoreSqlProvider scoreSqlProvider0 = new ScoreSqlProvider();
      Score score0 = new Score();
      Integer integer0 = new Integer(2554);
      score0.setMarkerid(integer0);
      String string0 = scoreSqlProvider0.insertSelective(score0);
      assertEquals("INSERT INTO score\n (markerid)\nVALUES (#{markerid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ScoreSqlProvider scoreSqlProvider0 = new ScoreSqlProvider();
      Score score0 = new Score();
      Integer integer0 = new Integer(2554);
      score0.setScoreid(integer0);
      String string0 = scoreSqlProvider0.insertSelective(score0);
      assertEquals("INSERT INTO score\n (scoreid)\nVALUES (#{scoreid,jdbcType=INTEGER})", string0);
  }
}

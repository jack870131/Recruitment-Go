/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 10 10:57:09 GMT 2020
 */

package com.recruit.recruitment.mapper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.recruit.recruitment.mapper.PostSqlProvider;
import com.recruit.recruitment.model.pojo.Post;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class PostSqlProvider_ESTest extends PostSqlProvider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PostSqlProvider postSqlProvider0 = new PostSqlProvider();
      // Undeclared exception!
      try { 
        postSqlProvider0.updateByPrimaryKeySelective((Post) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.mapper.PostSqlProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PostSqlProvider postSqlProvider0 = new PostSqlProvider();
      // Undeclared exception!
      try { 
        postSqlProvider0.insertSelective((Post) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.mapper.PostSqlProvider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Post post0 = new Post();
      Integer integer0 = new Integer(13);
      post0.setPicknum(integer0);
      PostSqlProvider postSqlProvider0 = new PostSqlProvider();
      String string0 = postSqlProvider0.updateByPrimaryKeySelective(post0);
      assertEquals("UPDATE post\nSET picknum = #{picknum,jdbcType=INTEGER}\nWHERE (postid = #{postid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PostSqlProvider postSqlProvider0 = new PostSqlProvider();
      Post post0 = new Post();
      post0.setDue("Ja^)%Frjwyh\"G<");
      String string0 = postSqlProvider0.updateByPrimaryKeySelective(post0);
      assertEquals("UPDATE post\nSET due = #{due,jdbcType=DATE}\nWHERE (postid = #{postid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PostSqlProvider postSqlProvider0 = new PostSqlProvider();
      Post post0 = new Post();
      post0.setCriteria(")+$QtKi$1L9t*");
      String string0 = postSqlProvider0.updateByPrimaryKeySelective(post0);
      assertEquals("UPDATE post\nSET criteria = #{criteria,jdbcType=VARCHAR}\nWHERE (postid = #{postid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PostSqlProvider postSqlProvider0 = new PostSqlProvider();
      Post post0 = new Post();
      post0.setDescription("UPDATE post\nWHERE (postid = #{postid,jdbcType=INTEGER})");
      String string0 = postSqlProvider0.updateByPrimaryKeySelective(post0);
      assertEquals("UPDATE post\nSET description = #{description,jdbcType=VARCHAR}\nWHERE (postid = #{postid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PostSqlProvider postSqlProvider0 = new PostSqlProvider();
      Post post0 = new Post();
      post0.setSalarytype("");
      String string0 = postSqlProvider0.updateByPrimaryKeySelective(post0);
      assertEquals("UPDATE post\nSET salarytype = #{salarytype,jdbcType=VARCHAR}\nWHERE (postid = #{postid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PostSqlProvider postSqlProvider0 = new PostSqlProvider();
      Post post0 = new Post();
      Integer integer0 = new Integer((-1));
      post0.setSalary(integer0);
      String string0 = postSqlProvider0.updateByPrimaryKeySelective(post0);
      assertEquals("UPDATE post\nSET salary = #{salary,jdbcType=INTEGER}\nWHERE (postid = #{postid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PostSqlProvider postSqlProvider0 = new PostSqlProvider();
      Post post0 = new Post();
      post0.setCategory(")+$QtKi$1L9t*");
      String string0 = postSqlProvider0.updateByPrimaryKeySelective(post0);
      assertEquals("UPDATE post\nSET category = #{category,jdbcType=VARCHAR}\nWHERE (postid = #{postid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Post post0 = new Post();
      post0.setLocation("A");
      PostSqlProvider postSqlProvider0 = new PostSqlProvider();
      String string0 = postSqlProvider0.updateByPrimaryKeySelective(post0);
      assertEquals("UPDATE post\nSET location = #{location,jdbcType=VARCHAR}\nWHERE (postid = #{postid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PostSqlProvider postSqlProvider0 = new PostSqlProvider();
      Post post0 = new Post();
      post0.setJobname(")+$QtKi$1L9t*");
      String string0 = postSqlProvider0.updateByPrimaryKeySelective(post0);
      assertEquals("UPDATE post\nSET jobname = #{jobname,jdbcType=VARCHAR}\nWHERE (postid = #{postid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Post post0 = new Post();
      PostSqlProvider postSqlProvider0 = new PostSqlProvider();
      post0.setCompanyname("INSERT INTO post\n (postid, location, picknum)\nVALUES (#{postid,jdbcType=INTEGER}, #{location,jdbcType=VARCHAR}, #{picknum,jdbcType=INTEGER})");
      String string0 = postSqlProvider0.updateByPrimaryKeySelective(post0);
      assertEquals("UPDATE post\nSET companyname = #{companyname,jdbcType=VARCHAR}\nWHERE (postid = #{postid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PostSqlProvider postSqlProvider0 = new PostSqlProvider();
      Post post0 = new Post();
      Integer integer0 = new Integer(1557);
      post0.setAuthorid(integer0);
      String string0 = postSqlProvider0.updateByPrimaryKeySelective(post0);
      assertEquals("UPDATE post\nSET authorid = #{authorid,jdbcType=INTEGER}\nWHERE (postid = #{postid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Post post0 = new Post();
      Integer integer0 = new Integer(13);
      post0.setPicknum(integer0);
      PostSqlProvider postSqlProvider0 = new PostSqlProvider();
      String string0 = postSqlProvider0.insertSelective(post0);
      assertEquals("INSERT INTO post\n (picknum)\nVALUES (#{picknum,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PostSqlProvider postSqlProvider0 = new PostSqlProvider();
      Post post0 = new Post();
      post0.setDue("Ja^)%Frjwyh\"G<");
      String string0 = postSqlProvider0.insertSelective(post0);
      assertEquals("INSERT INTO post\n (due)\nVALUES (#{due,jdbcType=DATE})", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PostSqlProvider postSqlProvider0 = new PostSqlProvider();
      Post post0 = new Post();
      post0.setCriteria("#{postid,jdbcType=INTEGER}");
      String string0 = postSqlProvider0.insertSelective(post0);
      assertEquals("INSERT INTO post\n (criteria)\nVALUES (#{criteria,jdbcType=VARCHAR})", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PostSqlProvider postSqlProvider0 = new PostSqlProvider();
      Post post0 = new Post();
      post0.setDescription("UPDATE post\nWHERE (postid = #{postid,jdbcType=INTEGER})");
      String string0 = postSqlProvider0.insertSelective(post0);
      assertEquals("INSERT INTO post\n (description)\nVALUES (#{description,jdbcType=VARCHAR})", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PostSqlProvider postSqlProvider0 = new PostSqlProvider();
      Post post0 = new Post();
      post0.setSalarytype("");
      String string0 = postSqlProvider0.insertSelective(post0);
      assertEquals("INSERT INTO post\n (salarytype)\nVALUES (#{salarytype,jdbcType=VARCHAR})", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PostSqlProvider postSqlProvider0 = new PostSqlProvider();
      Post post0 = new Post();
      Integer integer0 = new Integer((-1));
      post0.setSalary(integer0);
      String string0 = postSqlProvider0.insertSelective(post0);
      assertEquals("INSERT INTO post\n (salary)\nVALUES (#{salary,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PostSqlProvider postSqlProvider0 = new PostSqlProvider();
      Post post0 = new Post();
      post0.setCategory(")+$QtKi$1L9t*");
      String string0 = postSqlProvider0.insertSelective(post0);
      assertEquals("INSERT INTO post\n (category)\nVALUES (#{category,jdbcType=VARCHAR})", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Post post0 = new Post();
      post0.setLocation("A");
      PostSqlProvider postSqlProvider0 = new PostSqlProvider();
      String string0 = postSqlProvider0.insertSelective(post0);
      assertEquals("INSERT INTO post\n (location)\nVALUES (#{location,jdbcType=VARCHAR})", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PostSqlProvider postSqlProvider0 = new PostSqlProvider();
      Post post0 = new Post();
      post0.setJobname(")+$QtKi$1L9t*");
      String string0 = postSqlProvider0.insertSelective(post0);
      assertEquals("INSERT INTO post\n (jobname)\nVALUES (#{jobname,jdbcType=VARCHAR})", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Post post0 = new Post();
      PostSqlProvider postSqlProvider0 = new PostSqlProvider();
      post0.setCompanyname("INSERT INTO post\n (postid, location, picknum)\nVALUES (#{postid,jdbcType=INTEGER}, #{location,jdbcType=VARCHAR}, #{picknum,jdbcType=INTEGER})");
      String string0 = postSqlProvider0.insertSelective(post0);
      assertEquals("INSERT INTO post\n (companyname)\nVALUES (#{companyname,jdbcType=VARCHAR})", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PostSqlProvider postSqlProvider0 = new PostSqlProvider();
      Post post0 = new Post();
      Integer integer0 = new Integer(1557);
      post0.setAuthorid(integer0);
      String string0 = postSqlProvider0.insertSelective(post0);
      assertEquals("INSERT INTO post\n (authorid)\nVALUES (#{authorid,jdbcType=INTEGER})", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Post post0 = new Post();
      Integer integer0 = new Integer(13);
      post0.setPostid(integer0);
      PostSqlProvider postSqlProvider0 = new PostSqlProvider();
      String string0 = postSqlProvider0.insertSelective(post0);
      assertEquals("INSERT INTO post\n (postid)\nVALUES (#{postid,jdbcType=INTEGER})", string0);
  }
}

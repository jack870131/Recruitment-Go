/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 10 11:32:36 GMT 2020
 */

package com.recruit.recruitment.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.recruit.recruitment.controller.NotificationController;
import com.recruit.recruitment.model.entity.Result;
import com.recruit.recruitment.service.NotificationService;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class NotificationController_ESTest extends NotificationController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NotificationController notificationController0 = new NotificationController();
      NotificationService notificationService0 = mock(NotificationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(notificationController0, (Class<?>) NotificationController.class, "notificationService", (Object) notificationService0);
      Injector.validateBean(notificationController0, (Class<?>) NotificationController.class);
      notificationController0.notificationService = null;
      Result result0 = notificationController0.getNotificationsByUserid();
      assertEquals(201, (int)result0.getCode());
      assertEquals("Query failed", result0.getMessage());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NotificationController notificationController0 = new NotificationController();
      NotificationService notificationService0 = mock(NotificationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(notificationController0, (Class<?>) NotificationController.class, "notificationService", (Object) notificationService0);
      Injector.validateBean(notificationController0, (Class<?>) NotificationController.class);
      Integer integer0 = new Integer((-41));
      Result result0 = notificationController0.deleteNotificationByNotificationid(integer0);
      assertEquals("Delete successful", result0.getMessage());
      assertEquals(200, (int)result0.getCode());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NotificationController notificationController0 = new NotificationController();
      NotificationService notificationService0 = mock(NotificationService.class, new ViolatedAssumptionAnswer());
      Injector.inject(notificationController0, (Class<?>) NotificationController.class, "notificationService", (Object) notificationService0);
      Injector.validateBean(notificationController0, (Class<?>) NotificationController.class);
      Integer integer0 = new Integer((-41));
      notificationController0.notificationService = null;
      Result result0 = notificationController0.deleteNotificationByNotificationid(integer0);
      assertEquals(201, (int)result0.getCode());
      assertEquals("Delete failed", result0.getMessage());
  }
}

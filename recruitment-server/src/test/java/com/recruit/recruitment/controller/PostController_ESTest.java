/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 10 11:27:05 GMT 2020
 */

package com.recruit.recruitment.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import com.recruit.recruitment.controller.PostController;
import com.recruit.recruitment.model.entity.Result;
import com.recruit.recruitment.model.pojo.Post;
import com.recruit.recruitment.service.PostService;
import com.recruit.recruitment.utils.FormatUtil;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class PostController_ESTest extends PostController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PostController postController0 = new PostController();
      FormatUtil formatUtil0 = mock(FormatUtil.class, new ViolatedAssumptionAnswer());
      Injector.inject(postController0, (Class<?>) PostController.class, "formatUtil", (Object) formatUtil0);
      PostService postService0 = mock(PostService.class, new ViolatedAssumptionAnswer());
      doReturn((List<Post>) null).when(postService0).findPostsByCategory(anyString());
      Injector.inject(postController0, (Class<?>) PostController.class, "postService", (Object) postService0);
      Injector.validateBean(postController0, (Class<?>) PostController.class);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn("'GS\"#", (Post) null).when(httpServletRequest0).getAttribute(anyString());
      Result result0 = postController0.getPostsByCategory(httpServletRequest0);
      assertEquals("Query successful", result0.getMessage());
      assertEquals(200, (int)result0.getCode());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PostController postController0 = new PostController();
      FormatUtil formatUtil0 = mock(FormatUtil.class, new ViolatedAssumptionAnswer());
      Injector.inject(postController0, (Class<?>) PostController.class, "formatUtil", (Object) formatUtil0);
      PostService postService0 = mock(PostService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postController0, (Class<?>) PostController.class, "postService", (Object) postService0);
      Injector.validateBean(postController0, (Class<?>) PostController.class);
      Result result0 = postController0.getPostsByCategory((HttpServletRequest) null);
      assertEquals(201, (int)result0.getCode());
      assertEquals("Query failed", result0.getMessage());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PostController postController0 = new PostController();
      FormatUtil formatUtil0 = mock(FormatUtil.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true, false).when(formatUtil0).checkObjectNull(any(java.lang.Object[].class));
      Injector.inject(postController0, (Class<?>) PostController.class, "formatUtil", (Object) formatUtil0);
      PostService postService0 = mock(PostService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postController0, (Class<?>) PostController.class, "postService", (Object) postService0);
      Injector.validateBean(postController0, (Class<?>) PostController.class);
      Integer integer0 = new Integer((-200));
      Result result0 = postController0.postJob((Post) null, "D#5hB9ZEz|L(JVoD");
      assertEquals("Incomplete info", result0.getMessage());
      assertEquals(201, (int)result0.getCode());
      
      Result result1 = postController0.postJob((Post) null, "D#5hB9ZEz|L(JVoD");
      assertEquals("Add successful", result1.getMessage());
      assertEquals(200, (int)result1.getCode());
      
      Result result2 = postController0.editJob(integer0, (Post) null, "D#5hB9ZEz|L(JVoD");
      assertEquals(200, (int)result2.getCode());
      assertEquals("Update successful", result2.getMessage());
      
      Result result3 = postController0.editJob(integer0, (Post) null, "D#5hB9ZEz|L(JVoD");
      assertEquals("Incomplete info", result3.getMessage());
      assertEquals(201, (int)result3.getCode());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PostController postController0 = new PostController();
      FormatUtil formatUtil0 = mock(FormatUtil.class, new ViolatedAssumptionAnswer());
      Injector.inject(postController0, (Class<?>) PostController.class, "formatUtil", (Object) formatUtil0);
      PostService postService0 = mock(PostService.class, new ViolatedAssumptionAnswer());
      Injector.inject(postController0, (Class<?>) PostController.class, "postService", (Object) postService0);
      Injector.validateBean(postController0, (Class<?>) PostController.class);
      Integer integer0 = new Integer((-200));
      Result result0 = postController0.deletePost(integer0);
      assertEquals("Delete successful", result0.getMessage());
      assertEquals(200, (int)result0.getCode());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PostController postController0 = new PostController();
      FormatUtil formatUtil0 = mock(FormatUtil.class, new ViolatedAssumptionAnswer());
      Injector.inject(postController0, (Class<?>) PostController.class, "formatUtil", (Object) formatUtil0);
      PostService postService0 = mock(PostService.class, new ViolatedAssumptionAnswer());
      doReturn((List<Object>) null).when(postService0).searchPosts(anyString());
      Injector.inject(postController0, (Class<?>) PostController.class, "postService", (Object) postService0);
      Injector.validateBean(postController0, (Class<?>) PostController.class);
      Result result0 = postController0.searchPost("Update successful");
      assertEquals(200, (int)result0.getCode());
      assertEquals("Query successful", result0.getMessage());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PostController postController0 = new PostController();
      FormatUtil formatUtil0 = mock(FormatUtil.class, new ViolatedAssumptionAnswer());
      Injector.inject(postController0, (Class<?>) PostController.class, "formatUtil", (Object) formatUtil0);
      PostService postService0 = mock(PostService.class, new ViolatedAssumptionAnswer());
      doReturn((Post) null).when(postService0).findPostByPostid(anyInt());
      Injector.inject(postController0, (Class<?>) PostController.class, "postService", (Object) postService0);
      Injector.validateBean(postController0, (Class<?>) PostController.class);
      Integer integer0 = new Integer(0);
      Result result0 = postController0.getPostByPostid(integer0);
      assertEquals(200, (int)result0.getCode());
      assertEquals("Query successful", result0.getMessage());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PostController postController0 = new PostController();
      FormatUtil formatUtil0 = mock(FormatUtil.class, new ViolatedAssumptionAnswer());
      Injector.inject(postController0, (Class<?>) PostController.class, "formatUtil", (Object) formatUtil0);
      PostService postService0 = mock(PostService.class, new ViolatedAssumptionAnswer());
      doReturn((List<Object>) null).when(postService0).findAllPosts();
      Injector.inject(postController0, (Class<?>) PostController.class, "postService", (Object) postService0);
      Injector.validateBean(postController0, (Class<?>) PostController.class);
      Result result0 = postController0.getAllPosts();
      assertEquals(200, (int)result0.getCode());
      assertEquals("Query successful", result0.getMessage());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PostController postController0 = new PostController();
      FormatUtil formatUtil0 = mock(FormatUtil.class, new ViolatedAssumptionAnswer());
      Injector.inject(postController0, (Class<?>) PostController.class, "formatUtil", (Object) formatUtil0);
      PostService postService0 = mock(PostService.class, new ViolatedAssumptionAnswer());
      doReturn((List<Object>) null).when(postService0).findPostsByEvaluator();
      Injector.inject(postController0, (Class<?>) PostController.class, "postService", (Object) postService0);
      Injector.validateBean(postController0, (Class<?>) PostController.class);
      Result result0 = postController0.getPostsByEvaluator();
      assertEquals("Query successful", result0.getMessage());
      assertEquals(200, (int)result0.getCode());
  }
}

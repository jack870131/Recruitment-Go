/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 10 11:29:22 GMT 2020
 */

package com.recruit.recruitment.model.pojo;

import org.junit.Test;
import static org.junit.Assert.*;
import com.recruit.recruitment.model.pojo.Discussion;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Discussion_ESTest extends Discussion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      discussion0.setTitle("[&{T60");
      String string0 = discussion0.getTitle();
      assertEquals("[&{T60", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      Integer integer0 = new Integer(173);
      discussion0.setSenderid(integer0);
      Integer integer1 = discussion0.getSenderid();
      assertEquals(173, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      Integer integer0 = new Integer(0);
      discussion0.setSenderid(integer0);
      Integer integer1 = discussion0.getSenderid();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      Integer integer0 = new Integer((-478));
      discussion0.setSenderid(integer0);
      Integer integer1 = discussion0.getSenderid();
      assertEquals((-478), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      Integer integer0 = new Integer(0);
      discussion0.setReceiverid(integer0);
      Integer integer1 = discussion0.getReceiverid();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      Integer integer0 = new Integer(1);
      discussion0.setReceiverid(integer0);
      Integer integer1 = discussion0.getReceiverid();
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      Integer integer0 = new Integer((-1));
      discussion0.setReceiverid(integer0);
      Integer integer1 = discussion0.getReceiverid();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      Integer integer0 = new Integer((-778));
      discussion0.setNotificationid(integer0);
      Integer integer1 = discussion0.getNotificationid();
      assertEquals((-778), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      Integer integer0 = new Integer(0);
      discussion0.setNotificationid(integer0);
      Integer integer1 = discussion0.getNotificationid();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      Integer integer0 = new Integer(1873);
      discussion0.setNotificationid(integer0);
      Integer integer1 = discussion0.getNotificationid();
      assertEquals(1873, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      Integer integer0 = new Integer(0);
      discussion0.setDiscussionid(integer0);
      Integer integer1 = discussion0.getDiscussionid();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      Integer integer0 = new Integer(1);
      discussion0.setDiscussionid(integer0);
      Integer integer1 = discussion0.getDiscussionid();
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      Integer integer0 = new Integer((-1));
      discussion0.setDiscussionid(integer0);
      Integer integer1 = discussion0.getDiscussionid();
      assertEquals((-1), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      discussion0.setContent("com.recruit.recruitment.model.pojo.Discussion");
      String string0 = discussion0.getContent();
      assertEquals("com.recruit.recruitment.model.pojo.Discussion", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      discussion0.setContent("");
      String string0 = discussion0.getContent();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      discussion0.setContent((String) null);
      assertNull(discussion0.getDiscussionid());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      discussion0.setTitle((String) null);
      assertNull(discussion0.getReceiverid());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      discussion0.setTitle("");
      String string0 = discussion0.getTitle();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      String string0 = discussion0.getTitle();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      Integer integer0 = discussion0.getSenderid();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      Integer integer0 = discussion0.getReceiverid();
      discussion0.setReceiverid(integer0);
      assertNull(discussion0.getDiscussionid());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      Integer integer0 = discussion0.getDiscussionid();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      String string0 = discussion0.getContent();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discussion discussion0 = new Discussion();
      Integer integer0 = discussion0.getNotificationid();
      assertNull(integer0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 10 11:17:41 GMT 2020
 */

package com.recruit.recruitment.serviceImpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.recruit.recruitment.mapper.DiscussionMapper;
import com.recruit.recruitment.mapper.NotificationMapper;
import com.recruit.recruitment.mapper.UserMapper;
import com.recruit.recruitment.model.pojo.Discussion;
import com.recruit.recruitment.model.pojo.User;
import com.recruit.recruitment.serviceImpl.DiscussionServiceImpl;
import com.recruit.recruitment.utils.JwtTokenUtil;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;
import org.springframework.amqp.rabbit.core.RabbitTemplate;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class DiscussionServiceImpl_ESTest extends DiscussionServiceImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DiscussionServiceImpl discussionServiceImpl0 = new DiscussionServiceImpl();
      DiscussionMapper discussionMapper0 = mock(DiscussionMapper.class, new ViolatedAssumptionAnswer());
      doReturn((-155), 2531).when(discussionMapper0).insertSelective(any(com.recruit.recruitment.model.pojo.Discussion.class));
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "discussionMapper", (Object) discussionMapper0);
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, new ViolatedAssumptionAnswer());
      doReturn(" error", " error").when(jwtTokenUtil0).getUsernameFromRequest(any(javax.servlet.http.HttpServletRequest.class));
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      Integer integer0 = new Integer((-289));
      NotificationMapper notificationMapper0 = mock(NotificationMapper.class, new ViolatedAssumptionAnswer());
      doReturn((-155), 0).when(notificationMapper0).insertSelective(any(com.recruit.recruitment.model.pojo.Notification.class));
      doReturn(integer0, (Integer) null).when(notificationMapper0).selectByMaxPostid();
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "notificationMapper", (Object) notificationMapper0);
      RabbitTemplate rabbitTemplate0 = mock(RabbitTemplate.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "rabbitTemplate", (Object) rabbitTemplate0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "request", (Object) httpServletRequest0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(user0).getUserid();
      doReturn((String) null).when(user0).getUsername();
      Integer integer1 = new Integer(2016);
      User user1 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn("dkR=3R+#nQkU0-+UO<").when(user1).getMail();
      doReturn(integer0).when(user1).getUserid();
      User user2 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn(integer0, integer1).when(user2).getUserid();
      doReturn("'R+fV^/PDJIS;OFz*").when(user2).getUsername();
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      doReturn(user1, (User) null).when(userMapper0).selectByPrimaryKey(anyInt());
      doReturn(user0, user1, user2, user2).when(userMapper0).selectByUsername(anyString());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class);
      discussionServiceImpl0.addDiscussion("'patterns' cannot be null", "'patterns' cannot be null", "'patterns' cannot be null");
      // Undeclared exception!
      try { 
        discussionServiceImpl0.addDiscussion("'patterns' cannot be null", "'patterns' cannot be null", "'patterns' cannot be null");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.serviceImpl.DiscussionServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DiscussionServiceImpl discussionServiceImpl0 = new DiscussionServiceImpl();
      DiscussionMapper discussionMapper0 = mock(DiscussionMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "discussionMapper", (Object) discussionMapper0);
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jwtTokenUtil0).getUsernameFromRequest(any(javax.servlet.http.HttpServletRequest.class));
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      NotificationMapper notificationMapper0 = mock(NotificationMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "notificationMapper", (Object) notificationMapper0);
      RabbitTemplate rabbitTemplate0 = mock(RabbitTemplate.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "rabbitTemplate", (Object) rabbitTemplate0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "request", (Object) httpServletRequest0);
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(userMapper0).selectByUsername(anyString());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class);
      // Undeclared exception!
      try { 
        discussionServiceImpl0.addDiscussion(";utD: n&D", "", ";utD: n&D");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.serviceImpl.DiscussionServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DiscussionServiceImpl discussionServiceImpl0 = new DiscussionServiceImpl();
      DiscussionMapper discussionMapper0 = mock(DiscussionMapper.class, new ViolatedAssumptionAnswer());
      doReturn((-155)).when(discussionMapper0).insertSelective(any(com.recruit.recruitment.model.pojo.Discussion.class));
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "discussionMapper", (Object) discussionMapper0);
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, new ViolatedAssumptionAnswer());
      doReturn(" error").when(jwtTokenUtil0).getUsernameFromRequest(any(javax.servlet.http.HttpServletRequest.class));
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      Integer integer0 = new Integer((-289));
      NotificationMapper notificationMapper0 = mock(NotificationMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(notificationMapper0).insertSelective(any(com.recruit.recruitment.model.pojo.Notification.class));
      doReturn((Integer) null).when(notificationMapper0).selectByMaxPostid();
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "notificationMapper", (Object) notificationMapper0);
      RabbitTemplate rabbitTemplate0 = mock(RabbitTemplate.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "rabbitTemplate", (Object) rabbitTemplate0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "request", (Object) httpServletRequest0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(user0).getUserid();
      doReturn((String) null).when(user0).getUsername();
      User user1 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(user1).getUserid();
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(userMapper0).selectByPrimaryKey(anyInt());
      doReturn(user0, user1).when(userMapper0).selectByUsername(anyString());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class);
      // Undeclared exception!
      try { 
        discussionServiceImpl0.addDiscussion(" error", "org.springframework.beans.BeansException", "org.springframework.beans.BeansException");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.serviceImpl.DiscussionServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DiscussionServiceImpl discussionServiceImpl0 = new DiscussionServiceImpl();
      DiscussionMapper discussionMapper0 = mock(DiscussionMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "discussionMapper", (Object) discussionMapper0);
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      Integer integer0 = new Integer((-289));
      NotificationMapper notificationMapper0 = mock(NotificationMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "notificationMapper", (Object) notificationMapper0);
      RabbitTemplate rabbitTemplate0 = mock(RabbitTemplate.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "rabbitTemplate", (Object) rabbitTemplate0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "request", (Object) httpServletRequest0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(user0).getUsername();
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      doReturn(user0).when(userMapper0).selectByPrimaryKey(anyInt());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class);
      List<String> list0 = discussionServiceImpl0.findReceiverByReplytoid(integer0);
      assertFalse(list0.contains("jwtTokenUtil"));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DiscussionServiceImpl discussionServiceImpl0 = new DiscussionServiceImpl();
      DiscussionMapper discussionMapper0 = mock(DiscussionMapper.class, new ViolatedAssumptionAnswer());
      doReturn((Discussion) null).when(discussionMapper0).selectByNotificationid(anyInt());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "discussionMapper", (Object) discussionMapper0);
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      NotificationMapper notificationMapper0 = mock(NotificationMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "notificationMapper", (Object) notificationMapper0);
      RabbitTemplate rabbitTemplate0 = mock(RabbitTemplate.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "rabbitTemplate", (Object) rabbitTemplate0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "request", (Object) httpServletRequest0);
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class);
      Integer integer0 = new Integer(377);
      Discussion discussion0 = discussionServiceImpl0.findDiscussionByNotificationid(integer0);
      assertNull(discussion0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DiscussionServiceImpl discussionServiceImpl0 = new DiscussionServiceImpl();
      DiscussionMapper discussionMapper0 = mock(DiscussionMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "discussionMapper", (Object) discussionMapper0);
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jwtTokenUtil0).getUsernameFromRequest(any(javax.servlet.http.HttpServletRequest.class));
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      NotificationMapper notificationMapper0 = mock(NotificationMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "notificationMapper", (Object) notificationMapper0);
      RabbitTemplate rabbitTemplate0 = mock(RabbitTemplate.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "rabbitTemplate", (Object) rabbitTemplate0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "request", (Object) httpServletRequest0);
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(userMapper0).selectByUsername(anyString());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class);
      // Undeclared exception!
      try { 
        discussionServiceImpl0.addDiscussion("", "", "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DiscussionServiceImpl discussionServiceImpl0 = new DiscussionServiceImpl();
      DiscussionMapper discussionMapper0 = mock(DiscussionMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "discussionMapper", (Object) discussionMapper0);
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, new ViolatedAssumptionAnswer());
      doReturn(" error").when(jwtTokenUtil0).getUsernameFromRequest(any(javax.servlet.http.HttpServletRequest.class));
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      Integer integer0 = new Integer((-289));
      Integer integer1 = new Integer((-1));
      NotificationMapper notificationMapper0 = mock(NotificationMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "notificationMapper", (Object) notificationMapper0);
      RabbitTemplate rabbitTemplate0 = mock(RabbitTemplate.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "rabbitTemplate", (Object) rabbitTemplate0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "request", (Object) httpServletRequest0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(user0).getUserid();
      User user1 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn(integer1).when(user1).getUserid();
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      doReturn(user0, user1).when(userMapper0).selectByUsername(anyString());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class);
      discussionServiceImpl0.addDiscussion("'patterns' cannot be null", "'patterns' cannot be null", "'patterns' cannot be null");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DiscussionServiceImpl discussionServiceImpl0 = new DiscussionServiceImpl();
      DiscussionMapper discussionMapper0 = mock(DiscussionMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "discussionMapper", (Object) discussionMapper0);
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jwtTokenUtil0).getUsernameFromRequest(any(javax.servlet.http.HttpServletRequest.class));
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      NotificationMapper notificationMapper0 = mock(NotificationMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "notificationMapper", (Object) notificationMapper0);
      RabbitTemplate rabbitTemplate0 = mock(RabbitTemplate.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "rabbitTemplate", (Object) rabbitTemplate0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "request", (Object) httpServletRequest0);
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(userMapper0).selectByUsername(anyString());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class);
      discussionServiceImpl0.addDiscussion("v^4@^", "v^4@^", "\"tiClasses\":[\"ti-valid\"]");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DiscussionServiceImpl discussionServiceImpl0 = new DiscussionServiceImpl();
      DiscussionMapper discussionMapper0 = mock(DiscussionMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "discussionMapper", (Object) discussionMapper0);
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jwtTokenUtil0).getUsernameFromRequest(any(javax.servlet.http.HttpServletRequest.class));
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      NotificationMapper notificationMapper0 = mock(NotificationMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "notificationMapper", (Object) notificationMapper0);
      RabbitTemplate rabbitTemplate0 = mock(RabbitTemplate.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "rabbitTemplate", (Object) rabbitTemplate0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "request", (Object) httpServletRequest0);
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(userMapper0).selectByUsername(anyString());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class);
      // Undeclared exception!
      try { 
        discussionServiceImpl0.addDiscussion("(?)", "(?)", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The mail address is not matched for any other users
         //
         verifyException("com.recruit.recruitment.serviceImpl.DiscussionServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DiscussionServiceImpl discussionServiceImpl0 = new DiscussionServiceImpl();
      DiscussionMapper discussionMapper0 = mock(DiscussionMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "discussionMapper", (Object) discussionMapper0);
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      Integer integer0 = new Integer((-3844));
      NotificationMapper notificationMapper0 = mock(NotificationMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "notificationMapper", (Object) notificationMapper0);
      RabbitTemplate rabbitTemplate0 = mock(RabbitTemplate.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "rabbitTemplate", (Object) rabbitTemplate0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "request", (Object) httpServletRequest0);
      // Undeclared exception!
      try { 
        discussionServiceImpl0.findReceiverByReplytoid(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.serviceImpl.DiscussionServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DiscussionServiceImpl discussionServiceImpl0 = new DiscussionServiceImpl();
      Discussion discussion0 = mock(Discussion.class, new ViolatedAssumptionAnswer());
      doReturn("connection").when(discussion0).toString();
      DiscussionMapper discussionMapper0 = mock(DiscussionMapper.class, new ViolatedAssumptionAnswer());
      doReturn(discussion0).when(discussionMapper0).selectByNotificationid(anyInt());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "discussionMapper", (Object) discussionMapper0);
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      Integer integer0 = new Integer((-289));
      NotificationMapper notificationMapper0 = mock(NotificationMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "notificationMapper", (Object) notificationMapper0);
      RabbitTemplate rabbitTemplate0 = mock(RabbitTemplate.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "rabbitTemplate", (Object) rabbitTemplate0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "request", (Object) httpServletRequest0);
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(discussionServiceImpl0, (Class<?>) DiscussionServiceImpl.class);
      Discussion discussion1 = discussionServiceImpl0.findDiscussionByNotificationid(integer0);
      assertNull(discussion1.getTitle());
  }
}

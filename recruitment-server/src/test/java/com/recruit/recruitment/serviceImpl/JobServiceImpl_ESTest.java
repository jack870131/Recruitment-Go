/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 10 11:32:09 GMT 2020
 */

package com.recruit.recruitment.serviceImpl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.recruit.recruitment.mapper.JobMapper;
import com.recruit.recruitment.mapper.UserMapper;
import com.recruit.recruitment.model.pojo.Job;
import com.recruit.recruitment.model.pojo.User;
import com.recruit.recruitment.serviceImpl.JobServiceImpl;
import com.recruit.recruitment.utils.JwtTokenUtil;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class JobServiceImpl_ESTest extends JobServiceImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      JobServiceImpl jobServiceImpl0 = new JobServiceImpl();
      JobMapper jobMapper0 = mock(JobMapper.class, new ViolatedAssumptionAnswer());
      doReturn((Job) null).when(jobMapper0).selectByPrimaryKey(anyInt());
      doReturn((List) null).when(jobMapper0).selectByUserid(anyInt());
      Injector.inject(jobServiceImpl0, (Class<?>) JobServiceImpl.class, "jobMapper", (Object) jobMapper0);
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, new ViolatedAssumptionAnswer());
      doReturn("b0-G0H", (String) null).when(jwtTokenUtil0).getUsernameFromRequest(any(javax.servlet.http.HttpServletRequest.class));
      Injector.inject(jobServiceImpl0, (Class<?>) JobServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      Injector.inject(jobServiceImpl0, (Class<?>) JobServiceImpl.class, "request", (Object) httpServletRequest0);
      User user0 = mock(User.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(user0).getUserid();
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      doReturn(user0, (User) null).when(userMapper0).selectByUsername(anyString());
      Injector.inject(jobServiceImpl0, (Class<?>) JobServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(jobServiceImpl0, (Class<?>) JobServiceImpl.class);
      JwtTokenUtil jwtTokenUtil1 = jobServiceImpl0.jwtTokenUtil;
      jobServiceImpl0.jwtTokenUtil = jwtTokenUtil1;
      Integer integer0 = new Integer(2171);
      jobServiceImpl0.findJobByJobid(integer0);
      jobServiceImpl0.findJobByUserid();
      // Undeclared exception!
      try { 
        jobServiceImpl0.findJobByUserid();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.serviceImpl.JobServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JobServiceImpl jobServiceImpl0 = new JobServiceImpl();
      Job job0 = mock(Job.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(job0).toString();
      JobMapper jobMapper0 = mock(JobMapper.class, new ViolatedAssumptionAnswer());
      doReturn(job0).when(jobMapper0).selectByPrimaryKey(anyInt());
      Injector.inject(jobServiceImpl0, (Class<?>) JobServiceImpl.class, "jobMapper", (Object) jobMapper0);
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, new ViolatedAssumptionAnswer());
      Injector.inject(jobServiceImpl0, (Class<?>) JobServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      Injector.inject(jobServiceImpl0, (Class<?>) JobServiceImpl.class, "request", (Object) httpServletRequest0);
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(jobServiceImpl0, (Class<?>) JobServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(jobServiceImpl0, (Class<?>) JobServiceImpl.class);
      Integer integer0 = new Integer(0);
      Job job1 = jobServiceImpl0.findJobByJobid(integer0);
      assertNull(job1.getCompanyname());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      JobServiceImpl jobServiceImpl0 = new JobServiceImpl();
      JobMapper jobMapper0 = mock(JobMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(jobServiceImpl0, (Class<?>) JobServiceImpl.class, "jobMapper", (Object) jobMapper0);
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, new ViolatedAssumptionAnswer());
      Injector.inject(jobServiceImpl0, (Class<?>) JobServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      Injector.inject(jobServiceImpl0, (Class<?>) JobServiceImpl.class, "request", (Object) httpServletRequest0);
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(jobServiceImpl0, (Class<?>) JobServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(jobServiceImpl0, (Class<?>) JobServiceImpl.class);
      jobServiceImpl0.jobMapper = null;
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        jobServiceImpl0.findJobByJobid(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.serviceImpl.JobServiceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      JobServiceImpl jobServiceImpl0 = new JobServiceImpl();
      JobMapper jobMapper0 = mock(JobMapper.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(jobMapper0).insertSelective(any(com.recruit.recruitment.model.pojo.Job.class));
      Injector.inject(jobServiceImpl0, (Class<?>) JobServiceImpl.class, "jobMapper", (Object) jobMapper0);
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, new ViolatedAssumptionAnswer());
      Injector.inject(jobServiceImpl0, (Class<?>) JobServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      Injector.inject(jobServiceImpl0, (Class<?>) JobServiceImpl.class, "request", (Object) httpServletRequest0);
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(jobServiceImpl0, (Class<?>) JobServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(jobServiceImpl0, (Class<?>) JobServiceImpl.class);
      jobServiceImpl0.addJob((Job) null);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      JobServiceImpl jobServiceImpl0 = new JobServiceImpl();
      JobMapper jobMapper0 = mock(JobMapper.class, new ViolatedAssumptionAnswer());
      Injector.inject(jobServiceImpl0, (Class<?>) JobServiceImpl.class, "jobMapper", (Object) jobMapper0);
      JwtTokenUtil jwtTokenUtil0 = mock(JwtTokenUtil.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(jwtTokenUtil0).getUsernameFromRequest(any(javax.servlet.http.HttpServletRequest.class));
      Injector.inject(jobServiceImpl0, (Class<?>) JobServiceImpl.class, "jwtTokenUtil", (Object) jwtTokenUtil0);
      HttpServletRequest httpServletRequest0 = mock(HttpServletRequest.class, new ViolatedAssumptionAnswer());
      Injector.inject(jobServiceImpl0, (Class<?>) JobServiceImpl.class, "request", (Object) httpServletRequest0);
      UserMapper userMapper0 = mock(UserMapper.class, new ViolatedAssumptionAnswer());
      doReturn((User) null).when(userMapper0).selectByUsername(anyString());
      Injector.inject(jobServiceImpl0, (Class<?>) JobServiceImpl.class, "userMapper", (Object) userMapper0);
      Injector.validateBean(jobServiceImpl0, (Class<?>) JobServiceImpl.class);
      // Undeclared exception!
      try { 
        jobServiceImpl0.deleteJobByUserid();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.recruit.recruitment.serviceImpl.JobServiceImpl", e);
      }
  }
}
